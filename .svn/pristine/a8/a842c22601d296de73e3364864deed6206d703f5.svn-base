package io.realm;


import android.annotation.TargetApi;
import android.os.Build;
import android.util.JsonReader;
import android.util.JsonToken;
import io.realm.RealmObjectSchema;
import io.realm.RealmSchema;
import io.realm.exceptions.RealmMigrationNeededException;
import io.realm.internal.ColumnInfo;
import io.realm.internal.LinkView;
import io.realm.internal.RealmObjectProxy;
import io.realm.internal.Row;
import io.realm.internal.SharedRealm;
import io.realm.internal.Table;
import io.realm.internal.android.JsonUtils;
import io.realm.log.RealmLog;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class DDRProductRealmProxy extends quay.com.ipos.ddrsales.model.DDRProduct
    implements RealmObjectProxy, DDRProductRealmProxyInterface {

    static final class DDRProductColumnInfo extends ColumnInfo
        implements Cloneable {

        public long iProductModalIdIndex;
        public long productCodeIndex;
        public long sProductNameIndex;
        public long productImageIndex;
        public long sProductPriceIndex;
        public long sProductStockIndex;
        public long sProductWeightIndex;
        public long isDiscountIndex;
        public long gstPercIndex;
        public long cgstIndex;
        public long sgstIndex;
        public long salesPriceIndex;
        public long nrvIndex;
        public long gplIndex;
        public long mrpIndex;
        public long barCodeNumberIndex;
        public long pointsIndex;
        public long pointsBasedOnIndex;
        public long valueFromIndex;
        public long valueToIndex;
        public long pointsPerIndex;
        public long isReserveStockIndex;
        public long isCheckStockIndex;
        public long isStockDisplayIndex;
        public long discountIndex;
        public long isSyncIndex;
        public long isUpdateIndex;
        public long OrderIdIndex;
        public long isAddedIndex;
        public long qtyIndex;
        public long totalPriceIndex;
        public long discountPriceIndex;
        public long totalPointsIndex;
        public long totalStockIndex;
        public long isFreeItemIndex;
        public long isRuleAppliedIndex;
        public long parentProductIdIndex;
        public long mCheckStockIndex;
        public long checkStockClickIndex;
        public long accumulatedLoyalityIndex;
        public long pUOMIndex;
        public long mUOMIndex;
        public long conversionFactorIndex;
        public long brandNameIndex;
        public long subCategoryNameIndex;
        public long categoryNameIndex;
        public long hsnNameIndex;
        public long hsnCodeIndex;
        public long sProductFeatureIndex;

        DDRProductColumnInfo(String path, Table table) {
            final Map<String, Long> indicesMap = new HashMap<String, Long>(49);
            this.iProductModalIdIndex = getValidColumnIndex(path, table, "DDRProduct", "iProductModalId");
            indicesMap.put("iProductModalId", this.iProductModalIdIndex);
            this.productCodeIndex = getValidColumnIndex(path, table, "DDRProduct", "productCode");
            indicesMap.put("productCode", this.productCodeIndex);
            this.sProductNameIndex = getValidColumnIndex(path, table, "DDRProduct", "sProductName");
            indicesMap.put("sProductName", this.sProductNameIndex);
            this.productImageIndex = getValidColumnIndex(path, table, "DDRProduct", "productImage");
            indicesMap.put("productImage", this.productImageIndex);
            this.sProductPriceIndex = getValidColumnIndex(path, table, "DDRProduct", "sProductPrice");
            indicesMap.put("sProductPrice", this.sProductPriceIndex);
            this.sProductStockIndex = getValidColumnIndex(path, table, "DDRProduct", "sProductStock");
            indicesMap.put("sProductStock", this.sProductStockIndex);
            this.sProductWeightIndex = getValidColumnIndex(path, table, "DDRProduct", "sProductWeight");
            indicesMap.put("sProductWeight", this.sProductWeightIndex);
            this.isDiscountIndex = getValidColumnIndex(path, table, "DDRProduct", "isDiscount");
            indicesMap.put("isDiscount", this.isDiscountIndex);
            this.gstPercIndex = getValidColumnIndex(path, table, "DDRProduct", "gstPerc");
            indicesMap.put("gstPerc", this.gstPercIndex);
            this.cgstIndex = getValidColumnIndex(path, table, "DDRProduct", "cgst");
            indicesMap.put("cgst", this.cgstIndex);
            this.sgstIndex = getValidColumnIndex(path, table, "DDRProduct", "sgst");
            indicesMap.put("sgst", this.sgstIndex);
            this.salesPriceIndex = getValidColumnIndex(path, table, "DDRProduct", "salesPrice");
            indicesMap.put("salesPrice", this.salesPriceIndex);
            this.nrvIndex = getValidColumnIndex(path, table, "DDRProduct", "nrv");
            indicesMap.put("nrv", this.nrvIndex);
            this.gplIndex = getValidColumnIndex(path, table, "DDRProduct", "gpl");
            indicesMap.put("gpl", this.gplIndex);
            this.mrpIndex = getValidColumnIndex(path, table, "DDRProduct", "mrp");
            indicesMap.put("mrp", this.mrpIndex);
            this.barCodeNumberIndex = getValidColumnIndex(path, table, "DDRProduct", "barCodeNumber");
            indicesMap.put("barCodeNumber", this.barCodeNumberIndex);
            this.pointsIndex = getValidColumnIndex(path, table, "DDRProduct", "points");
            indicesMap.put("points", this.pointsIndex);
            this.pointsBasedOnIndex = getValidColumnIndex(path, table, "DDRProduct", "pointsBasedOn");
            indicesMap.put("pointsBasedOn", this.pointsBasedOnIndex);
            this.valueFromIndex = getValidColumnIndex(path, table, "DDRProduct", "valueFrom");
            indicesMap.put("valueFrom", this.valueFromIndex);
            this.valueToIndex = getValidColumnIndex(path, table, "DDRProduct", "valueTo");
            indicesMap.put("valueTo", this.valueToIndex);
            this.pointsPerIndex = getValidColumnIndex(path, table, "DDRProduct", "pointsPer");
            indicesMap.put("pointsPer", this.pointsPerIndex);
            this.isReserveStockIndex = getValidColumnIndex(path, table, "DDRProduct", "isReserveStock");
            indicesMap.put("isReserveStock", this.isReserveStockIndex);
            this.isCheckStockIndex = getValidColumnIndex(path, table, "DDRProduct", "isCheckStock");
            indicesMap.put("isCheckStock", this.isCheckStockIndex);
            this.isStockDisplayIndex = getValidColumnIndex(path, table, "DDRProduct", "isStockDisplay");
            indicesMap.put("isStockDisplay", this.isStockDisplayIndex);
            this.discountIndex = getValidColumnIndex(path, table, "DDRProduct", "discount");
            indicesMap.put("discount", this.discountIndex);
            this.isSyncIndex = getValidColumnIndex(path, table, "DDRProduct", "isSync");
            indicesMap.put("isSync", this.isSyncIndex);
            this.isUpdateIndex = getValidColumnIndex(path, table, "DDRProduct", "isUpdate");
            indicesMap.put("isUpdate", this.isUpdateIndex);
            this.OrderIdIndex = getValidColumnIndex(path, table, "DDRProduct", "OrderId");
            indicesMap.put("OrderId", this.OrderIdIndex);
            this.isAddedIndex = getValidColumnIndex(path, table, "DDRProduct", "isAdded");
            indicesMap.put("isAdded", this.isAddedIndex);
            this.qtyIndex = getValidColumnIndex(path, table, "DDRProduct", "qty");
            indicesMap.put("qty", this.qtyIndex);
            this.totalPriceIndex = getValidColumnIndex(path, table, "DDRProduct", "totalPrice");
            indicesMap.put("totalPrice", this.totalPriceIndex);
            this.discountPriceIndex = getValidColumnIndex(path, table, "DDRProduct", "discountPrice");
            indicesMap.put("discountPrice", this.discountPriceIndex);
            this.totalPointsIndex = getValidColumnIndex(path, table, "DDRProduct", "totalPoints");
            indicesMap.put("totalPoints", this.totalPointsIndex);
            this.totalStockIndex = getValidColumnIndex(path, table, "DDRProduct", "totalStock");
            indicesMap.put("totalStock", this.totalStockIndex);
            this.isFreeItemIndex = getValidColumnIndex(path, table, "DDRProduct", "isFreeItem");
            indicesMap.put("isFreeItem", this.isFreeItemIndex);
            this.isRuleAppliedIndex = getValidColumnIndex(path, table, "DDRProduct", "isRuleApplied");
            indicesMap.put("isRuleApplied", this.isRuleAppliedIndex);
            this.parentProductIdIndex = getValidColumnIndex(path, table, "DDRProduct", "parentProductId");
            indicesMap.put("parentProductId", this.parentProductIdIndex);
            this.mCheckStockIndex = getValidColumnIndex(path, table, "DDRProduct", "mCheckStock");
            indicesMap.put("mCheckStock", this.mCheckStockIndex);
            this.checkStockClickIndex = getValidColumnIndex(path, table, "DDRProduct", "checkStockClick");
            indicesMap.put("checkStockClick", this.checkStockClickIndex);
            this.accumulatedLoyalityIndex = getValidColumnIndex(path, table, "DDRProduct", "accumulatedLoyality");
            indicesMap.put("accumulatedLoyality", this.accumulatedLoyalityIndex);
            this.pUOMIndex = getValidColumnIndex(path, table, "DDRProduct", "pUOM");
            indicesMap.put("pUOM", this.pUOMIndex);
            this.mUOMIndex = getValidColumnIndex(path, table, "DDRProduct", "mUOM");
            indicesMap.put("mUOM", this.mUOMIndex);
            this.conversionFactorIndex = getValidColumnIndex(path, table, "DDRProduct", "conversionFactor");
            indicesMap.put("conversionFactor", this.conversionFactorIndex);
            this.brandNameIndex = getValidColumnIndex(path, table, "DDRProduct", "brandName");
            indicesMap.put("brandName", this.brandNameIndex);
            this.subCategoryNameIndex = getValidColumnIndex(path, table, "DDRProduct", "subCategoryName");
            indicesMap.put("subCategoryName", this.subCategoryNameIndex);
            this.categoryNameIndex = getValidColumnIndex(path, table, "DDRProduct", "categoryName");
            indicesMap.put("categoryName", this.categoryNameIndex);
            this.hsnNameIndex = getValidColumnIndex(path, table, "DDRProduct", "hsnName");
            indicesMap.put("hsnName", this.hsnNameIndex);
            this.hsnCodeIndex = getValidColumnIndex(path, table, "DDRProduct", "hsnCode");
            indicesMap.put("hsnCode", this.hsnCodeIndex);
            this.sProductFeatureIndex = getValidColumnIndex(path, table, "DDRProduct", "sProductFeature");
            indicesMap.put("sProductFeature", this.sProductFeatureIndex);

            setIndicesMap(indicesMap);
        }

        @Override
        public final void copyColumnInfoFrom(ColumnInfo other) {
            final DDRProductColumnInfo otherInfo = (DDRProductColumnInfo) other;
            this.iProductModalIdIndex = otherInfo.iProductModalIdIndex;
            this.productCodeIndex = otherInfo.productCodeIndex;
            this.sProductNameIndex = otherInfo.sProductNameIndex;
            this.productImageIndex = otherInfo.productImageIndex;
            this.sProductPriceIndex = otherInfo.sProductPriceIndex;
            this.sProductStockIndex = otherInfo.sProductStockIndex;
            this.sProductWeightIndex = otherInfo.sProductWeightIndex;
            this.isDiscountIndex = otherInfo.isDiscountIndex;
            this.gstPercIndex = otherInfo.gstPercIndex;
            this.cgstIndex = otherInfo.cgstIndex;
            this.sgstIndex = otherInfo.sgstIndex;
            this.salesPriceIndex = otherInfo.salesPriceIndex;
            this.nrvIndex = otherInfo.nrvIndex;
            this.gplIndex = otherInfo.gplIndex;
            this.mrpIndex = otherInfo.mrpIndex;
            this.barCodeNumberIndex = otherInfo.barCodeNumberIndex;
            this.pointsIndex = otherInfo.pointsIndex;
            this.pointsBasedOnIndex = otherInfo.pointsBasedOnIndex;
            this.valueFromIndex = otherInfo.valueFromIndex;
            this.valueToIndex = otherInfo.valueToIndex;
            this.pointsPerIndex = otherInfo.pointsPerIndex;
            this.isReserveStockIndex = otherInfo.isReserveStockIndex;
            this.isCheckStockIndex = otherInfo.isCheckStockIndex;
            this.isStockDisplayIndex = otherInfo.isStockDisplayIndex;
            this.discountIndex = otherInfo.discountIndex;
            this.isSyncIndex = otherInfo.isSyncIndex;
            this.isUpdateIndex = otherInfo.isUpdateIndex;
            this.OrderIdIndex = otherInfo.OrderIdIndex;
            this.isAddedIndex = otherInfo.isAddedIndex;
            this.qtyIndex = otherInfo.qtyIndex;
            this.totalPriceIndex = otherInfo.totalPriceIndex;
            this.discountPriceIndex = otherInfo.discountPriceIndex;
            this.totalPointsIndex = otherInfo.totalPointsIndex;
            this.totalStockIndex = otherInfo.totalStockIndex;
            this.isFreeItemIndex = otherInfo.isFreeItemIndex;
            this.isRuleAppliedIndex = otherInfo.isRuleAppliedIndex;
            this.parentProductIdIndex = otherInfo.parentProductIdIndex;
            this.mCheckStockIndex = otherInfo.mCheckStockIndex;
            this.checkStockClickIndex = otherInfo.checkStockClickIndex;
            this.accumulatedLoyalityIndex = otherInfo.accumulatedLoyalityIndex;
            this.pUOMIndex = otherInfo.pUOMIndex;
            this.mUOMIndex = otherInfo.mUOMIndex;
            this.conversionFactorIndex = otherInfo.conversionFactorIndex;
            this.brandNameIndex = otherInfo.brandNameIndex;
            this.subCategoryNameIndex = otherInfo.subCategoryNameIndex;
            this.categoryNameIndex = otherInfo.categoryNameIndex;
            this.hsnNameIndex = otherInfo.hsnNameIndex;
            this.hsnCodeIndex = otherInfo.hsnCodeIndex;
            this.sProductFeatureIndex = otherInfo.sProductFeatureIndex;

            setIndicesMap(otherInfo.getIndicesMap());
        }

        @Override
        public final DDRProductColumnInfo clone() {
            return (DDRProductColumnInfo) super.clone();
        }

    }
    private DDRProductColumnInfo columnInfo;
    private ProxyState<quay.com.ipos.ddrsales.model.DDRProduct> proxyState;
    private static final List<String> FIELD_NAMES;
    static {
        List<String> fieldNames = new ArrayList<String>();
        fieldNames.add("iProductModalId");
        fieldNames.add("productCode");
        fieldNames.add("sProductName");
        fieldNames.add("productImage");
        fieldNames.add("sProductPrice");
        fieldNames.add("sProductStock");
        fieldNames.add("sProductWeight");
        fieldNames.add("isDiscount");
        fieldNames.add("gstPerc");
        fieldNames.add("cgst");
        fieldNames.add("sgst");
        fieldNames.add("salesPrice");
        fieldNames.add("nrv");
        fieldNames.add("gpl");
        fieldNames.add("mrp");
        fieldNames.add("barCodeNumber");
        fieldNames.add("points");
        fieldNames.add("pointsBasedOn");
        fieldNames.add("valueFrom");
        fieldNames.add("valueTo");
        fieldNames.add("pointsPer");
        fieldNames.add("isReserveStock");
        fieldNames.add("isCheckStock");
        fieldNames.add("isStockDisplay");
        fieldNames.add("discount");
        fieldNames.add("isSync");
        fieldNames.add("isUpdate");
        fieldNames.add("OrderId");
        fieldNames.add("isAdded");
        fieldNames.add("qty");
        fieldNames.add("totalPrice");
        fieldNames.add("discountPrice");
        fieldNames.add("totalPoints");
        fieldNames.add("totalStock");
        fieldNames.add("isFreeItem");
        fieldNames.add("isRuleApplied");
        fieldNames.add("parentProductId");
        fieldNames.add("mCheckStock");
        fieldNames.add("checkStockClick");
        fieldNames.add("accumulatedLoyality");
        fieldNames.add("pUOM");
        fieldNames.add("mUOM");
        fieldNames.add("conversionFactor");
        fieldNames.add("brandName");
        fieldNames.add("subCategoryName");
        fieldNames.add("categoryName");
        fieldNames.add("hsnName");
        fieldNames.add("hsnCode");
        fieldNames.add("sProductFeature");
        FIELD_NAMES = Collections.unmodifiableList(fieldNames);
    }

    DDRProductRealmProxy() {
        proxyState.setConstructionFinished();
    }

    @Override
    public void realm$injectObjectContext() {
        if (this.proxyState != null) {
            return;
        }
        final BaseRealm.RealmObjectContext context = BaseRealm.objectContext.get();
        this.columnInfo = (DDRProductColumnInfo) context.getColumnInfo();
        this.proxyState = new ProxyState<quay.com.ipos.ddrsales.model.DDRProduct>(this);
        proxyState.setRealm$realm(context.getRealm());
        proxyState.setRow$realm(context.getRow());
        proxyState.setAcceptDefaultValue$realm(context.getAcceptDefaultValue());
        proxyState.setExcludeFields$realm(context.getExcludeFields());
    }

    @Override
    @SuppressWarnings("cast")
    public String realmGet$iProductModalId() {
        proxyState.getRealm$realm().checkIfValid();
        return (java.lang.String) proxyState.getRow$realm().getString(columnInfo.iProductModalIdIndex);
    }

    @Override
    public void realmSet$iProductModalId(String value) {
        if (proxyState.isUnderConstruction()) {
            // default value of the primary key is always ignored.
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        throw new io.realm.exceptions.RealmException("Primary key field 'iProductModalId' cannot be changed after object was created.");
    }

    @Override
    @SuppressWarnings("cast")
    public String realmGet$productCode() {
        proxyState.getRealm$realm().checkIfValid();
        return (java.lang.String) proxyState.getRow$realm().getString(columnInfo.productCodeIndex);
    }

    @Override
    public void realmSet$productCode(String value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            if (value == null) {
                row.getTable().setNull(columnInfo.productCodeIndex, row.getIndex(), true);
                return;
            }
            row.getTable().setString(columnInfo.productCodeIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        if (value == null) {
            proxyState.getRow$realm().setNull(columnInfo.productCodeIndex);
            return;
        }
        proxyState.getRow$realm().setString(columnInfo.productCodeIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public String realmGet$sProductName() {
        proxyState.getRealm$realm().checkIfValid();
        return (java.lang.String) proxyState.getRow$realm().getString(columnInfo.sProductNameIndex);
    }

    @Override
    public void realmSet$sProductName(String value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            if (value == null) {
                row.getTable().setNull(columnInfo.sProductNameIndex, row.getIndex(), true);
                return;
            }
            row.getTable().setString(columnInfo.sProductNameIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        if (value == null) {
            proxyState.getRow$realm().setNull(columnInfo.sProductNameIndex);
            return;
        }
        proxyState.getRow$realm().setString(columnInfo.sProductNameIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public String realmGet$productImage() {
        proxyState.getRealm$realm().checkIfValid();
        return (java.lang.String) proxyState.getRow$realm().getString(columnInfo.productImageIndex);
    }

    @Override
    public void realmSet$productImage(String value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            if (value == null) {
                row.getTable().setNull(columnInfo.productImageIndex, row.getIndex(), true);
                return;
            }
            row.getTable().setString(columnInfo.productImageIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        if (value == null) {
            proxyState.getRow$realm().setNull(columnInfo.productImageIndex);
            return;
        }
        proxyState.getRow$realm().setString(columnInfo.productImageIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public int realmGet$sProductPrice() {
        proxyState.getRealm$realm().checkIfValid();
        return (int) proxyState.getRow$realm().getLong(columnInfo.sProductPriceIndex);
    }

    @Override
    public void realmSet$sProductPrice(int value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setLong(columnInfo.sProductPriceIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setLong(columnInfo.sProductPriceIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public String realmGet$sProductStock() {
        proxyState.getRealm$realm().checkIfValid();
        return (java.lang.String) proxyState.getRow$realm().getString(columnInfo.sProductStockIndex);
    }

    @Override
    public void realmSet$sProductStock(String value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            if (value == null) {
                row.getTable().setNull(columnInfo.sProductStockIndex, row.getIndex(), true);
                return;
            }
            row.getTable().setString(columnInfo.sProductStockIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        if (value == null) {
            proxyState.getRow$realm().setNull(columnInfo.sProductStockIndex);
            return;
        }
        proxyState.getRow$realm().setString(columnInfo.sProductStockIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public int realmGet$sProductWeight() {
        proxyState.getRealm$realm().checkIfValid();
        return (int) proxyState.getRow$realm().getLong(columnInfo.sProductWeightIndex);
    }

    @Override
    public void realmSet$sProductWeight(int value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setLong(columnInfo.sProductWeightIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setLong(columnInfo.sProductWeightIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public boolean realmGet$isDiscount() {
        proxyState.getRealm$realm().checkIfValid();
        return (boolean) proxyState.getRow$realm().getBoolean(columnInfo.isDiscountIndex);
    }

    @Override
    public void realmSet$isDiscount(boolean value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setBoolean(columnInfo.isDiscountIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setBoolean(columnInfo.isDiscountIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public int realmGet$gstPerc() {
        proxyState.getRealm$realm().checkIfValid();
        return (int) proxyState.getRow$realm().getLong(columnInfo.gstPercIndex);
    }

    @Override
    public void realmSet$gstPerc(int value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setLong(columnInfo.gstPercIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setLong(columnInfo.gstPercIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public int realmGet$cgst() {
        proxyState.getRealm$realm().checkIfValid();
        return (int) proxyState.getRow$realm().getLong(columnInfo.cgstIndex);
    }

    @Override
    public void realmSet$cgst(int value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setLong(columnInfo.cgstIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setLong(columnInfo.cgstIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public int realmGet$sgst() {
        proxyState.getRealm$realm().checkIfValid();
        return (int) proxyState.getRow$realm().getLong(columnInfo.sgstIndex);
    }

    @Override
    public void realmSet$sgst(int value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setLong(columnInfo.sgstIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setLong(columnInfo.sgstIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public int realmGet$salesPrice() {
        proxyState.getRealm$realm().checkIfValid();
        return (int) proxyState.getRow$realm().getLong(columnInfo.salesPriceIndex);
    }

    @Override
    public void realmSet$salesPrice(int value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setLong(columnInfo.salesPriceIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setLong(columnInfo.salesPriceIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public int realmGet$nrv() {
        proxyState.getRealm$realm().checkIfValid();
        return (int) proxyState.getRow$realm().getLong(columnInfo.nrvIndex);
    }

    @Override
    public void realmSet$nrv(int value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setLong(columnInfo.nrvIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setLong(columnInfo.nrvIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public int realmGet$gpl() {
        proxyState.getRealm$realm().checkIfValid();
        return (int) proxyState.getRow$realm().getLong(columnInfo.gplIndex);
    }

    @Override
    public void realmSet$gpl(int value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setLong(columnInfo.gplIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setLong(columnInfo.gplIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public int realmGet$mrp() {
        proxyState.getRealm$realm().checkIfValid();
        return (int) proxyState.getRow$realm().getLong(columnInfo.mrpIndex);
    }

    @Override
    public void realmSet$mrp(int value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setLong(columnInfo.mrpIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setLong(columnInfo.mrpIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public String realmGet$barCodeNumber() {
        proxyState.getRealm$realm().checkIfValid();
        return (java.lang.String) proxyState.getRow$realm().getString(columnInfo.barCodeNumberIndex);
    }

    @Override
    public void realmSet$barCodeNumber(String value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            if (value == null) {
                row.getTable().setNull(columnInfo.barCodeNumberIndex, row.getIndex(), true);
                return;
            }
            row.getTable().setString(columnInfo.barCodeNumberIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        if (value == null) {
            proxyState.getRow$realm().setNull(columnInfo.barCodeNumberIndex);
            return;
        }
        proxyState.getRow$realm().setString(columnInfo.barCodeNumberIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public int realmGet$points() {
        proxyState.getRealm$realm().checkIfValid();
        return (int) proxyState.getRow$realm().getLong(columnInfo.pointsIndex);
    }

    @Override
    public void realmSet$points(int value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setLong(columnInfo.pointsIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setLong(columnInfo.pointsIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public String realmGet$pointsBasedOn() {
        proxyState.getRealm$realm().checkIfValid();
        return (java.lang.String) proxyState.getRow$realm().getString(columnInfo.pointsBasedOnIndex);
    }

    @Override
    public void realmSet$pointsBasedOn(String value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            if (value == null) {
                row.getTable().setNull(columnInfo.pointsBasedOnIndex, row.getIndex(), true);
                return;
            }
            row.getTable().setString(columnInfo.pointsBasedOnIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        if (value == null) {
            proxyState.getRow$realm().setNull(columnInfo.pointsBasedOnIndex);
            return;
        }
        proxyState.getRow$realm().setString(columnInfo.pointsBasedOnIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public int realmGet$valueFrom() {
        proxyState.getRealm$realm().checkIfValid();
        return (int) proxyState.getRow$realm().getLong(columnInfo.valueFromIndex);
    }

    @Override
    public void realmSet$valueFrom(int value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setLong(columnInfo.valueFromIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setLong(columnInfo.valueFromIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public int realmGet$valueTo() {
        proxyState.getRealm$realm().checkIfValid();
        return (int) proxyState.getRow$realm().getLong(columnInfo.valueToIndex);
    }

    @Override
    public void realmSet$valueTo(int value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setLong(columnInfo.valueToIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setLong(columnInfo.valueToIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public int realmGet$pointsPer() {
        proxyState.getRealm$realm().checkIfValid();
        return (int) proxyState.getRow$realm().getLong(columnInfo.pointsPerIndex);
    }

    @Override
    public void realmSet$pointsPer(int value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setLong(columnInfo.pointsPerIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setLong(columnInfo.pointsPerIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public boolean realmGet$isReserveStock() {
        proxyState.getRealm$realm().checkIfValid();
        return (boolean) proxyState.getRow$realm().getBoolean(columnInfo.isReserveStockIndex);
    }

    @Override
    public void realmSet$isReserveStock(boolean value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setBoolean(columnInfo.isReserveStockIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setBoolean(columnInfo.isReserveStockIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public boolean realmGet$isCheckStock() {
        proxyState.getRealm$realm().checkIfValid();
        return (boolean) proxyState.getRow$realm().getBoolean(columnInfo.isCheckStockIndex);
    }

    @Override
    public void realmSet$isCheckStock(boolean value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setBoolean(columnInfo.isCheckStockIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setBoolean(columnInfo.isCheckStockIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public boolean realmGet$isStockDisplay() {
        proxyState.getRealm$realm().checkIfValid();
        return (boolean) proxyState.getRow$realm().getBoolean(columnInfo.isStockDisplayIndex);
    }

    @Override
    public void realmSet$isStockDisplay(boolean value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setBoolean(columnInfo.isStockDisplayIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setBoolean(columnInfo.isStockDisplayIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public String realmGet$discount() {
        proxyState.getRealm$realm().checkIfValid();
        return (java.lang.String) proxyState.getRow$realm().getString(columnInfo.discountIndex);
    }

    @Override
    public void realmSet$discount(String value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            if (value == null) {
                row.getTable().setNull(columnInfo.discountIndex, row.getIndex(), true);
                return;
            }
            row.getTable().setString(columnInfo.discountIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        if (value == null) {
            proxyState.getRow$realm().setNull(columnInfo.discountIndex);
            return;
        }
        proxyState.getRow$realm().setString(columnInfo.discountIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public boolean realmGet$isSync() {
        proxyState.getRealm$realm().checkIfValid();
        return (boolean) proxyState.getRow$realm().getBoolean(columnInfo.isSyncIndex);
    }

    @Override
    public void realmSet$isSync(boolean value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setBoolean(columnInfo.isSyncIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setBoolean(columnInfo.isSyncIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public boolean realmGet$isUpdate() {
        proxyState.getRealm$realm().checkIfValid();
        return (boolean) proxyState.getRow$realm().getBoolean(columnInfo.isUpdateIndex);
    }

    @Override
    public void realmSet$isUpdate(boolean value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setBoolean(columnInfo.isUpdateIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setBoolean(columnInfo.isUpdateIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public String realmGet$OrderId() {
        proxyState.getRealm$realm().checkIfValid();
        return (java.lang.String) proxyState.getRow$realm().getString(columnInfo.OrderIdIndex);
    }

    @Override
    public void realmSet$OrderId(String value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            if (value == null) {
                row.getTable().setNull(columnInfo.OrderIdIndex, row.getIndex(), true);
                return;
            }
            row.getTable().setString(columnInfo.OrderIdIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        if (value == null) {
            proxyState.getRow$realm().setNull(columnInfo.OrderIdIndex);
            return;
        }
        proxyState.getRow$realm().setString(columnInfo.OrderIdIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public boolean realmGet$isAdded() {
        proxyState.getRealm$realm().checkIfValid();
        return (boolean) proxyState.getRow$realm().getBoolean(columnInfo.isAddedIndex);
    }

    @Override
    public void realmSet$isAdded(boolean value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setBoolean(columnInfo.isAddedIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setBoolean(columnInfo.isAddedIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public int realmGet$qty() {
        proxyState.getRealm$realm().checkIfValid();
        return (int) proxyState.getRow$realm().getLong(columnInfo.qtyIndex);
    }

    @Override
    public void realmSet$qty(int value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setLong(columnInfo.qtyIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setLong(columnInfo.qtyIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public int realmGet$totalPrice() {
        proxyState.getRealm$realm().checkIfValid();
        return (int) proxyState.getRow$realm().getLong(columnInfo.totalPriceIndex);
    }

    @Override
    public void realmSet$totalPrice(int value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setLong(columnInfo.totalPriceIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setLong(columnInfo.totalPriceIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public double realmGet$discountPrice() {
        proxyState.getRealm$realm().checkIfValid();
        return (double) proxyState.getRow$realm().getDouble(columnInfo.discountPriceIndex);
    }

    @Override
    public void realmSet$discountPrice(double value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setDouble(columnInfo.discountPriceIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setDouble(columnInfo.discountPriceIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public int realmGet$totalPoints() {
        proxyState.getRealm$realm().checkIfValid();
        return (int) proxyState.getRow$realm().getLong(columnInfo.totalPointsIndex);
    }

    @Override
    public void realmSet$totalPoints(int value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setLong(columnInfo.totalPointsIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setLong(columnInfo.totalPointsIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public int realmGet$totalStock() {
        proxyState.getRealm$realm().checkIfValid();
        return (int) proxyState.getRow$realm().getLong(columnInfo.totalStockIndex);
    }

    @Override
    public void realmSet$totalStock(int value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setLong(columnInfo.totalStockIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setLong(columnInfo.totalStockIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public boolean realmGet$isFreeItem() {
        proxyState.getRealm$realm().checkIfValid();
        return (boolean) proxyState.getRow$realm().getBoolean(columnInfo.isFreeItemIndex);
    }

    @Override
    public void realmSet$isFreeItem(boolean value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setBoolean(columnInfo.isFreeItemIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setBoolean(columnInfo.isFreeItemIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public boolean realmGet$isRuleApplied() {
        proxyState.getRealm$realm().checkIfValid();
        return (boolean) proxyState.getRow$realm().getBoolean(columnInfo.isRuleAppliedIndex);
    }

    @Override
    public void realmSet$isRuleApplied(boolean value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setBoolean(columnInfo.isRuleAppliedIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setBoolean(columnInfo.isRuleAppliedIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public String realmGet$parentProductId() {
        proxyState.getRealm$realm().checkIfValid();
        return (java.lang.String) proxyState.getRow$realm().getString(columnInfo.parentProductIdIndex);
    }

    @Override
    public void realmSet$parentProductId(String value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            if (value == null) {
                row.getTable().setNull(columnInfo.parentProductIdIndex, row.getIndex(), true);
                return;
            }
            row.getTable().setString(columnInfo.parentProductIdIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        if (value == null) {
            proxyState.getRow$realm().setNull(columnInfo.parentProductIdIndex);
            return;
        }
        proxyState.getRow$realm().setString(columnInfo.parentProductIdIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public int realmGet$mCheckStock() {
        proxyState.getRealm$realm().checkIfValid();
        return (int) proxyState.getRow$realm().getLong(columnInfo.mCheckStockIndex);
    }

    @Override
    public void realmSet$mCheckStock(int value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setLong(columnInfo.mCheckStockIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setLong(columnInfo.mCheckStockIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public boolean realmGet$checkStockClick() {
        proxyState.getRealm$realm().checkIfValid();
        return (boolean) proxyState.getRow$realm().getBoolean(columnInfo.checkStockClickIndex);
    }

    @Override
    public void realmSet$checkStockClick(boolean value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setBoolean(columnInfo.checkStockClickIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setBoolean(columnInfo.checkStockClickIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public double realmGet$accumulatedLoyality() {
        proxyState.getRealm$realm().checkIfValid();
        return (double) proxyState.getRow$realm().getDouble(columnInfo.accumulatedLoyalityIndex);
    }

    @Override
    public void realmSet$accumulatedLoyality(double value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setDouble(columnInfo.accumulatedLoyalityIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setDouble(columnInfo.accumulatedLoyalityIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public String realmGet$pUOM() {
        proxyState.getRealm$realm().checkIfValid();
        return (java.lang.String) proxyState.getRow$realm().getString(columnInfo.pUOMIndex);
    }

    @Override
    public void realmSet$pUOM(String value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            if (value == null) {
                row.getTable().setNull(columnInfo.pUOMIndex, row.getIndex(), true);
                return;
            }
            row.getTable().setString(columnInfo.pUOMIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        if (value == null) {
            proxyState.getRow$realm().setNull(columnInfo.pUOMIndex);
            return;
        }
        proxyState.getRow$realm().setString(columnInfo.pUOMIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public String realmGet$mUOM() {
        proxyState.getRealm$realm().checkIfValid();
        return (java.lang.String) proxyState.getRow$realm().getString(columnInfo.mUOMIndex);
    }

    @Override
    public void realmSet$mUOM(String value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            if (value == null) {
                row.getTable().setNull(columnInfo.mUOMIndex, row.getIndex(), true);
                return;
            }
            row.getTable().setString(columnInfo.mUOMIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        if (value == null) {
            proxyState.getRow$realm().setNull(columnInfo.mUOMIndex);
            return;
        }
        proxyState.getRow$realm().setString(columnInfo.mUOMIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public double realmGet$conversionFactor() {
        proxyState.getRealm$realm().checkIfValid();
        return (double) proxyState.getRow$realm().getDouble(columnInfo.conversionFactorIndex);
    }

    @Override
    public void realmSet$conversionFactor(double value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setDouble(columnInfo.conversionFactorIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setDouble(columnInfo.conversionFactorIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public String realmGet$brandName() {
        proxyState.getRealm$realm().checkIfValid();
        return (java.lang.String) proxyState.getRow$realm().getString(columnInfo.brandNameIndex);
    }

    @Override
    public void realmSet$brandName(String value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            if (value == null) {
                row.getTable().setNull(columnInfo.brandNameIndex, row.getIndex(), true);
                return;
            }
            row.getTable().setString(columnInfo.brandNameIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        if (value == null) {
            proxyState.getRow$realm().setNull(columnInfo.brandNameIndex);
            return;
        }
        proxyState.getRow$realm().setString(columnInfo.brandNameIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public String realmGet$subCategoryName() {
        proxyState.getRealm$realm().checkIfValid();
        return (java.lang.String) proxyState.getRow$realm().getString(columnInfo.subCategoryNameIndex);
    }

    @Override
    public void realmSet$subCategoryName(String value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            if (value == null) {
                row.getTable().setNull(columnInfo.subCategoryNameIndex, row.getIndex(), true);
                return;
            }
            row.getTable().setString(columnInfo.subCategoryNameIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        if (value == null) {
            proxyState.getRow$realm().setNull(columnInfo.subCategoryNameIndex);
            return;
        }
        proxyState.getRow$realm().setString(columnInfo.subCategoryNameIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public String realmGet$categoryName() {
        proxyState.getRealm$realm().checkIfValid();
        return (java.lang.String) proxyState.getRow$realm().getString(columnInfo.categoryNameIndex);
    }

    @Override
    public void realmSet$categoryName(String value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            if (value == null) {
                row.getTable().setNull(columnInfo.categoryNameIndex, row.getIndex(), true);
                return;
            }
            row.getTable().setString(columnInfo.categoryNameIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        if (value == null) {
            proxyState.getRow$realm().setNull(columnInfo.categoryNameIndex);
            return;
        }
        proxyState.getRow$realm().setString(columnInfo.categoryNameIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public String realmGet$hsnName() {
        proxyState.getRealm$realm().checkIfValid();
        return (java.lang.String) proxyState.getRow$realm().getString(columnInfo.hsnNameIndex);
    }

    @Override
    public void realmSet$hsnName(String value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            if (value == null) {
                row.getTable().setNull(columnInfo.hsnNameIndex, row.getIndex(), true);
                return;
            }
            row.getTable().setString(columnInfo.hsnNameIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        if (value == null) {
            proxyState.getRow$realm().setNull(columnInfo.hsnNameIndex);
            return;
        }
        proxyState.getRow$realm().setString(columnInfo.hsnNameIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public String realmGet$hsnCode() {
        proxyState.getRealm$realm().checkIfValid();
        return (java.lang.String) proxyState.getRow$realm().getString(columnInfo.hsnCodeIndex);
    }

    @Override
    public void realmSet$hsnCode(String value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            if (value == null) {
                row.getTable().setNull(columnInfo.hsnCodeIndex, row.getIndex(), true);
                return;
            }
            row.getTable().setString(columnInfo.hsnCodeIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        if (value == null) {
            proxyState.getRow$realm().setNull(columnInfo.hsnCodeIndex);
            return;
        }
        proxyState.getRow$realm().setString(columnInfo.hsnCodeIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public String realmGet$sProductFeature() {
        proxyState.getRealm$realm().checkIfValid();
        return (java.lang.String) proxyState.getRow$realm().getString(columnInfo.sProductFeatureIndex);
    }

    @Override
    public void realmSet$sProductFeature(String value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            if (value == null) {
                row.getTable().setNull(columnInfo.sProductFeatureIndex, row.getIndex(), true);
                return;
            }
            row.getTable().setString(columnInfo.sProductFeatureIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        if (value == null) {
            proxyState.getRow$realm().setNull(columnInfo.sProductFeatureIndex);
            return;
        }
        proxyState.getRow$realm().setString(columnInfo.sProductFeatureIndex, value);
    }

    public static RealmObjectSchema createRealmObjectSchema(RealmSchema realmSchema) {
        if (!realmSchema.contains("DDRProduct")) {
            RealmObjectSchema realmObjectSchema = realmSchema.create("DDRProduct");
            realmObjectSchema.add("iProductModalId", RealmFieldType.STRING, Property.PRIMARY_KEY, Property.INDEXED, !Property.REQUIRED);
            realmObjectSchema.add("productCode", RealmFieldType.STRING, !Property.PRIMARY_KEY, !Property.INDEXED, !Property.REQUIRED);
            realmObjectSchema.add("sProductName", RealmFieldType.STRING, !Property.PRIMARY_KEY, !Property.INDEXED, !Property.REQUIRED);
            realmObjectSchema.add("productImage", RealmFieldType.STRING, !Property.PRIMARY_KEY, !Property.INDEXED, !Property.REQUIRED);
            realmObjectSchema.add("sProductPrice", RealmFieldType.INTEGER, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("sProductStock", RealmFieldType.STRING, !Property.PRIMARY_KEY, !Property.INDEXED, !Property.REQUIRED);
            realmObjectSchema.add("sProductWeight", RealmFieldType.INTEGER, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("isDiscount", RealmFieldType.BOOLEAN, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("gstPerc", RealmFieldType.INTEGER, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("cgst", RealmFieldType.INTEGER, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("sgst", RealmFieldType.INTEGER, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("salesPrice", RealmFieldType.INTEGER, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("nrv", RealmFieldType.INTEGER, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("gpl", RealmFieldType.INTEGER, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("mrp", RealmFieldType.INTEGER, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("barCodeNumber", RealmFieldType.STRING, !Property.PRIMARY_KEY, !Property.INDEXED, !Property.REQUIRED);
            realmObjectSchema.add("points", RealmFieldType.INTEGER, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("pointsBasedOn", RealmFieldType.STRING, !Property.PRIMARY_KEY, !Property.INDEXED, !Property.REQUIRED);
            realmObjectSchema.add("valueFrom", RealmFieldType.INTEGER, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("valueTo", RealmFieldType.INTEGER, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("pointsPer", RealmFieldType.INTEGER, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("isReserveStock", RealmFieldType.BOOLEAN, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("isCheckStock", RealmFieldType.BOOLEAN, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("isStockDisplay", RealmFieldType.BOOLEAN, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("discount", RealmFieldType.STRING, !Property.PRIMARY_KEY, !Property.INDEXED, !Property.REQUIRED);
            realmObjectSchema.add("isSync", RealmFieldType.BOOLEAN, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("isUpdate", RealmFieldType.BOOLEAN, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("OrderId", RealmFieldType.STRING, !Property.PRIMARY_KEY, !Property.INDEXED, !Property.REQUIRED);
            realmObjectSchema.add("isAdded", RealmFieldType.BOOLEAN, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("qty", RealmFieldType.INTEGER, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("totalPrice", RealmFieldType.INTEGER, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("discountPrice", RealmFieldType.DOUBLE, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("totalPoints", RealmFieldType.INTEGER, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("totalStock", RealmFieldType.INTEGER, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("isFreeItem", RealmFieldType.BOOLEAN, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("isRuleApplied", RealmFieldType.BOOLEAN, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("parentProductId", RealmFieldType.STRING, !Property.PRIMARY_KEY, !Property.INDEXED, !Property.REQUIRED);
            realmObjectSchema.add("mCheckStock", RealmFieldType.INTEGER, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("checkStockClick", RealmFieldType.BOOLEAN, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("accumulatedLoyality", RealmFieldType.DOUBLE, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("pUOM", RealmFieldType.STRING, !Property.PRIMARY_KEY, !Property.INDEXED, !Property.REQUIRED);
            realmObjectSchema.add("mUOM", RealmFieldType.STRING, !Property.PRIMARY_KEY, !Property.INDEXED, !Property.REQUIRED);
            realmObjectSchema.add("conversionFactor", RealmFieldType.DOUBLE, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
            realmObjectSchema.add("brandName", RealmFieldType.STRING, !Property.PRIMARY_KEY, !Property.INDEXED, !Property.REQUIRED);
            realmObjectSchema.add("subCategoryName", RealmFieldType.STRING, !Property.PRIMARY_KEY, !Property.INDEXED, !Property.REQUIRED);
            realmObjectSchema.add("categoryName", RealmFieldType.STRING, !Property.PRIMARY_KEY, !Property.INDEXED, !Property.REQUIRED);
            realmObjectSchema.add("hsnName", RealmFieldType.STRING, !Property.PRIMARY_KEY, !Property.INDEXED, !Property.REQUIRED);
            realmObjectSchema.add("hsnCode", RealmFieldType.STRING, !Property.PRIMARY_KEY, !Property.INDEXED, !Property.REQUIRED);
            realmObjectSchema.add("sProductFeature", RealmFieldType.STRING, !Property.PRIMARY_KEY, !Property.INDEXED, !Property.REQUIRED);
            return realmObjectSchema;
        }
        return realmSchema.get("DDRProduct");
    }

    public static DDRProductColumnInfo validateTable(SharedRealm sharedRealm, boolean allowExtraColumns) {
        if (!sharedRealm.hasTable("class_DDRProduct")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "The 'DDRProduct' class is missing from the schema for this Realm.");
        }
        Table table = sharedRealm.getTable("class_DDRProduct");
        final long columnCount = table.getColumnCount();
        if (columnCount != 49) {
            if (columnCount < 49) {
                throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field count is less than expected - expected 49 but was " + columnCount);
            }
            if (allowExtraColumns) {
                RealmLog.debug("Field count is more than expected - expected 49 but was %1$d", columnCount);
            } else {
                throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field count is more than expected - expected 49 but was " + columnCount);
            }
        }
        Map<String, RealmFieldType> columnTypes = new HashMap<String, RealmFieldType>();
        for (long i = 0; i < columnCount; i++) {
            columnTypes.put(table.getColumnName(i), table.getColumnType(i));
        }

        final DDRProductColumnInfo columnInfo = new DDRProductColumnInfo(sharedRealm.getPath(), table);

        if (!table.hasPrimaryKey()) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Primary key not defined for field 'iProductModalId' in existing Realm file. @PrimaryKey was added.");
        } else {
            if (table.getPrimaryKey() != columnInfo.iProductModalIdIndex) {
                throw new RealmMigrationNeededException(sharedRealm.getPath(), "Primary Key annotation definition was changed, from field " + table.getColumnName(table.getPrimaryKey()) + " to field iProductModalId");
            }
        }

        if (!columnTypes.containsKey("iProductModalId")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'iProductModalId' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("iProductModalId") != RealmFieldType.STRING) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'String' for field 'iProductModalId' in existing Realm file.");
        }
        if (!table.isColumnNullable(columnInfo.iProductModalIdIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(),"@PrimaryKey field 'iProductModalId' does not support null values in the existing Realm file. Migrate using RealmObjectSchema.setNullable(), or mark the field as @Required.");
        }
        if (!table.hasSearchIndex(table.getColumnIndex("iProductModalId"))) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Index not defined for field 'iProductModalId' in existing Realm file. Either set @Index or migrate using io.realm.internal.Table.removeSearchIndex().");
        }
        if (!columnTypes.containsKey("productCode")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'productCode' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("productCode") != RealmFieldType.STRING) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'String' for field 'productCode' in existing Realm file.");
        }
        if (!table.isColumnNullable(columnInfo.productCodeIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'productCode' is required. Either set @Required to field 'productCode' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("sProductName")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'sProductName' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("sProductName") != RealmFieldType.STRING) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'String' for field 'sProductName' in existing Realm file.");
        }
        if (!table.isColumnNullable(columnInfo.sProductNameIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'sProductName' is required. Either set @Required to field 'sProductName' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("productImage")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'productImage' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("productImage") != RealmFieldType.STRING) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'String' for field 'productImage' in existing Realm file.");
        }
        if (!table.isColumnNullable(columnInfo.productImageIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'productImage' is required. Either set @Required to field 'productImage' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("sProductPrice")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'sProductPrice' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("sProductPrice") != RealmFieldType.INTEGER) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'int' for field 'sProductPrice' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.sProductPriceIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'sProductPrice' does support null values in the existing Realm file. Use corresponding boxed type for field 'sProductPrice' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("sProductStock")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'sProductStock' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("sProductStock") != RealmFieldType.STRING) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'String' for field 'sProductStock' in existing Realm file.");
        }
        if (!table.isColumnNullable(columnInfo.sProductStockIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'sProductStock' is required. Either set @Required to field 'sProductStock' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("sProductWeight")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'sProductWeight' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("sProductWeight") != RealmFieldType.INTEGER) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'int' for field 'sProductWeight' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.sProductWeightIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'sProductWeight' does support null values in the existing Realm file. Use corresponding boxed type for field 'sProductWeight' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("isDiscount")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'isDiscount' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("isDiscount") != RealmFieldType.BOOLEAN) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'boolean' for field 'isDiscount' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.isDiscountIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'isDiscount' does support null values in the existing Realm file. Use corresponding boxed type for field 'isDiscount' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("gstPerc")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'gstPerc' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("gstPerc") != RealmFieldType.INTEGER) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'int' for field 'gstPerc' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.gstPercIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'gstPerc' does support null values in the existing Realm file. Use corresponding boxed type for field 'gstPerc' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("cgst")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'cgst' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("cgst") != RealmFieldType.INTEGER) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'int' for field 'cgst' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.cgstIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'cgst' does support null values in the existing Realm file. Use corresponding boxed type for field 'cgst' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("sgst")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'sgst' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("sgst") != RealmFieldType.INTEGER) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'int' for field 'sgst' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.sgstIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'sgst' does support null values in the existing Realm file. Use corresponding boxed type for field 'sgst' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("salesPrice")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'salesPrice' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("salesPrice") != RealmFieldType.INTEGER) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'int' for field 'salesPrice' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.salesPriceIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'salesPrice' does support null values in the existing Realm file. Use corresponding boxed type for field 'salesPrice' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("nrv")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'nrv' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("nrv") != RealmFieldType.INTEGER) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'int' for field 'nrv' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.nrvIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'nrv' does support null values in the existing Realm file. Use corresponding boxed type for field 'nrv' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("gpl")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'gpl' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("gpl") != RealmFieldType.INTEGER) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'int' for field 'gpl' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.gplIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'gpl' does support null values in the existing Realm file. Use corresponding boxed type for field 'gpl' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("mrp")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'mrp' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("mrp") != RealmFieldType.INTEGER) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'int' for field 'mrp' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.mrpIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'mrp' does support null values in the existing Realm file. Use corresponding boxed type for field 'mrp' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("barCodeNumber")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'barCodeNumber' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("barCodeNumber") != RealmFieldType.STRING) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'String' for field 'barCodeNumber' in existing Realm file.");
        }
        if (!table.isColumnNullable(columnInfo.barCodeNumberIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'barCodeNumber' is required. Either set @Required to field 'barCodeNumber' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("points")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'points' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("points") != RealmFieldType.INTEGER) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'int' for field 'points' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.pointsIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'points' does support null values in the existing Realm file. Use corresponding boxed type for field 'points' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("pointsBasedOn")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'pointsBasedOn' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("pointsBasedOn") != RealmFieldType.STRING) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'String' for field 'pointsBasedOn' in existing Realm file.");
        }
        if (!table.isColumnNullable(columnInfo.pointsBasedOnIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'pointsBasedOn' is required. Either set @Required to field 'pointsBasedOn' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("valueFrom")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'valueFrom' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("valueFrom") != RealmFieldType.INTEGER) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'int' for field 'valueFrom' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.valueFromIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'valueFrom' does support null values in the existing Realm file. Use corresponding boxed type for field 'valueFrom' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("valueTo")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'valueTo' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("valueTo") != RealmFieldType.INTEGER) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'int' for field 'valueTo' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.valueToIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'valueTo' does support null values in the existing Realm file. Use corresponding boxed type for field 'valueTo' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("pointsPer")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'pointsPer' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("pointsPer") != RealmFieldType.INTEGER) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'int' for field 'pointsPer' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.pointsPerIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'pointsPer' does support null values in the existing Realm file. Use corresponding boxed type for field 'pointsPer' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("isReserveStock")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'isReserveStock' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("isReserveStock") != RealmFieldType.BOOLEAN) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'boolean' for field 'isReserveStock' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.isReserveStockIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'isReserveStock' does support null values in the existing Realm file. Use corresponding boxed type for field 'isReserveStock' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("isCheckStock")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'isCheckStock' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("isCheckStock") != RealmFieldType.BOOLEAN) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'boolean' for field 'isCheckStock' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.isCheckStockIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'isCheckStock' does support null values in the existing Realm file. Use corresponding boxed type for field 'isCheckStock' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("isStockDisplay")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'isStockDisplay' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("isStockDisplay") != RealmFieldType.BOOLEAN) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'boolean' for field 'isStockDisplay' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.isStockDisplayIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'isStockDisplay' does support null values in the existing Realm file. Use corresponding boxed type for field 'isStockDisplay' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("discount")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'discount' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("discount") != RealmFieldType.STRING) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'String' for field 'discount' in existing Realm file.");
        }
        if (!table.isColumnNullable(columnInfo.discountIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'discount' is required. Either set @Required to field 'discount' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("isSync")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'isSync' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("isSync") != RealmFieldType.BOOLEAN) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'boolean' for field 'isSync' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.isSyncIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'isSync' does support null values in the existing Realm file. Use corresponding boxed type for field 'isSync' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("isUpdate")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'isUpdate' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("isUpdate") != RealmFieldType.BOOLEAN) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'boolean' for field 'isUpdate' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.isUpdateIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'isUpdate' does support null values in the existing Realm file. Use corresponding boxed type for field 'isUpdate' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("OrderId")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'OrderId' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("OrderId") != RealmFieldType.STRING) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'String' for field 'OrderId' in existing Realm file.");
        }
        if (!table.isColumnNullable(columnInfo.OrderIdIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'OrderId' is required. Either set @Required to field 'OrderId' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("isAdded")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'isAdded' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("isAdded") != RealmFieldType.BOOLEAN) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'boolean' for field 'isAdded' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.isAddedIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'isAdded' does support null values in the existing Realm file. Use corresponding boxed type for field 'isAdded' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("qty")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'qty' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("qty") != RealmFieldType.INTEGER) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'int' for field 'qty' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.qtyIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'qty' does support null values in the existing Realm file. Use corresponding boxed type for field 'qty' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("totalPrice")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'totalPrice' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("totalPrice") != RealmFieldType.INTEGER) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'int' for field 'totalPrice' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.totalPriceIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'totalPrice' does support null values in the existing Realm file. Use corresponding boxed type for field 'totalPrice' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("discountPrice")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'discountPrice' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("discountPrice") != RealmFieldType.DOUBLE) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'double' for field 'discountPrice' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.discountPriceIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'discountPrice' does support null values in the existing Realm file. Use corresponding boxed type for field 'discountPrice' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("totalPoints")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'totalPoints' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("totalPoints") != RealmFieldType.INTEGER) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'int' for field 'totalPoints' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.totalPointsIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'totalPoints' does support null values in the existing Realm file. Use corresponding boxed type for field 'totalPoints' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("totalStock")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'totalStock' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("totalStock") != RealmFieldType.INTEGER) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'int' for field 'totalStock' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.totalStockIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'totalStock' does support null values in the existing Realm file. Use corresponding boxed type for field 'totalStock' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("isFreeItem")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'isFreeItem' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("isFreeItem") != RealmFieldType.BOOLEAN) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'boolean' for field 'isFreeItem' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.isFreeItemIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'isFreeItem' does support null values in the existing Realm file. Use corresponding boxed type for field 'isFreeItem' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("isRuleApplied")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'isRuleApplied' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("isRuleApplied") != RealmFieldType.BOOLEAN) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'boolean' for field 'isRuleApplied' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.isRuleAppliedIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'isRuleApplied' does support null values in the existing Realm file. Use corresponding boxed type for field 'isRuleApplied' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("parentProductId")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'parentProductId' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("parentProductId") != RealmFieldType.STRING) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'String' for field 'parentProductId' in existing Realm file.");
        }
        if (!table.isColumnNullable(columnInfo.parentProductIdIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'parentProductId' is required. Either set @Required to field 'parentProductId' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("mCheckStock")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'mCheckStock' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("mCheckStock") != RealmFieldType.INTEGER) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'int' for field 'mCheckStock' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.mCheckStockIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'mCheckStock' does support null values in the existing Realm file. Use corresponding boxed type for field 'mCheckStock' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("checkStockClick")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'checkStockClick' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("checkStockClick") != RealmFieldType.BOOLEAN) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'boolean' for field 'checkStockClick' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.checkStockClickIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'checkStockClick' does support null values in the existing Realm file. Use corresponding boxed type for field 'checkStockClick' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("accumulatedLoyality")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'accumulatedLoyality' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("accumulatedLoyality") != RealmFieldType.DOUBLE) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'double' for field 'accumulatedLoyality' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.accumulatedLoyalityIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'accumulatedLoyality' does support null values in the existing Realm file. Use corresponding boxed type for field 'accumulatedLoyality' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("pUOM")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'pUOM' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("pUOM") != RealmFieldType.STRING) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'String' for field 'pUOM' in existing Realm file.");
        }
        if (!table.isColumnNullable(columnInfo.pUOMIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'pUOM' is required. Either set @Required to field 'pUOM' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("mUOM")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'mUOM' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("mUOM") != RealmFieldType.STRING) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'String' for field 'mUOM' in existing Realm file.");
        }
        if (!table.isColumnNullable(columnInfo.mUOMIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'mUOM' is required. Either set @Required to field 'mUOM' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("conversionFactor")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'conversionFactor' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("conversionFactor") != RealmFieldType.DOUBLE) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'double' for field 'conversionFactor' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.conversionFactorIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'conversionFactor' does support null values in the existing Realm file. Use corresponding boxed type for field 'conversionFactor' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("brandName")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'brandName' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("brandName") != RealmFieldType.STRING) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'String' for field 'brandName' in existing Realm file.");
        }
        if (!table.isColumnNullable(columnInfo.brandNameIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'brandName' is required. Either set @Required to field 'brandName' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("subCategoryName")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'subCategoryName' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("subCategoryName") != RealmFieldType.STRING) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'String' for field 'subCategoryName' in existing Realm file.");
        }
        if (!table.isColumnNullable(columnInfo.subCategoryNameIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'subCategoryName' is required. Either set @Required to field 'subCategoryName' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("categoryName")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'categoryName' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("categoryName") != RealmFieldType.STRING) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'String' for field 'categoryName' in existing Realm file.");
        }
        if (!table.isColumnNullable(columnInfo.categoryNameIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'categoryName' is required. Either set @Required to field 'categoryName' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("hsnName")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'hsnName' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("hsnName") != RealmFieldType.STRING) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'String' for field 'hsnName' in existing Realm file.");
        }
        if (!table.isColumnNullable(columnInfo.hsnNameIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'hsnName' is required. Either set @Required to field 'hsnName' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("hsnCode")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'hsnCode' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("hsnCode") != RealmFieldType.STRING) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'String' for field 'hsnCode' in existing Realm file.");
        }
        if (!table.isColumnNullable(columnInfo.hsnCodeIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'hsnCode' is required. Either set @Required to field 'hsnCode' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("sProductFeature")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'sProductFeature' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("sProductFeature") != RealmFieldType.STRING) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'String' for field 'sProductFeature' in existing Realm file.");
        }
        if (!table.isColumnNullable(columnInfo.sProductFeatureIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'sProductFeature' is required. Either set @Required to field 'sProductFeature' or migrate using RealmObjectSchema.setNullable().");
        }

        return columnInfo;
    }

    public static String getTableName() {
        return "class_DDRProduct";
    }

    public static List<String> getFieldNames() {
        return FIELD_NAMES;
    }

    @SuppressWarnings("cast")
    public static quay.com.ipos.ddrsales.model.DDRProduct createOrUpdateUsingJsonObject(Realm realm, JSONObject json, boolean update)
        throws JSONException {
        final List<String> excludeFields = Collections.<String> emptyList();
        quay.com.ipos.ddrsales.model.DDRProduct obj = null;
        if (update) {
            Table table = realm.getTable(quay.com.ipos.ddrsales.model.DDRProduct.class);
            long pkColumnIndex = table.getPrimaryKey();
            long rowIndex = Table.NO_MATCH;
            if (json.isNull("iProductModalId")) {
                rowIndex = table.findFirstNull(pkColumnIndex);
            } else {
                rowIndex = table.findFirstString(pkColumnIndex, json.getString("iProductModalId"));
            }
            if (rowIndex != Table.NO_MATCH) {
                final BaseRealm.RealmObjectContext objectContext = BaseRealm.objectContext.get();
                try {
                    objectContext.set(realm, table.getUncheckedRow(rowIndex), realm.schema.getColumnInfo(quay.com.ipos.ddrsales.model.DDRProduct.class), false, Collections.<String> emptyList());
                    obj = new io.realm.DDRProductRealmProxy();
                } finally {
                    objectContext.clear();
                }
            }
        }
        if (obj == null) {
            if (json.has("iProductModalId")) {
                if (json.isNull("iProductModalId")) {
                    obj = (io.realm.DDRProductRealmProxy) realm.createObjectInternal(quay.com.ipos.ddrsales.model.DDRProduct.class, null, true, excludeFields);
                } else {
                    obj = (io.realm.DDRProductRealmProxy) realm.createObjectInternal(quay.com.ipos.ddrsales.model.DDRProduct.class, json.getString("iProductModalId"), true, excludeFields);
                }
            } else {
                throw new IllegalArgumentException("JSON object doesn't have the primary key field 'iProductModalId'.");
            }
        }
        if (json.has("productCode")) {
            if (json.isNull("productCode")) {
                ((DDRProductRealmProxyInterface) obj).realmSet$productCode(null);
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$productCode((String) json.getString("productCode"));
            }
        }
        if (json.has("sProductName")) {
            if (json.isNull("sProductName")) {
                ((DDRProductRealmProxyInterface) obj).realmSet$sProductName(null);
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$sProductName((String) json.getString("sProductName"));
            }
        }
        if (json.has("productImage")) {
            if (json.isNull("productImage")) {
                ((DDRProductRealmProxyInterface) obj).realmSet$productImage(null);
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$productImage((String) json.getString("productImage"));
            }
        }
        if (json.has("sProductPrice")) {
            if (json.isNull("sProductPrice")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'sProductPrice' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$sProductPrice((int) json.getInt("sProductPrice"));
            }
        }
        if (json.has("sProductStock")) {
            if (json.isNull("sProductStock")) {
                ((DDRProductRealmProxyInterface) obj).realmSet$sProductStock(null);
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$sProductStock((String) json.getString("sProductStock"));
            }
        }
        if (json.has("sProductWeight")) {
            if (json.isNull("sProductWeight")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'sProductWeight' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$sProductWeight((int) json.getInt("sProductWeight"));
            }
        }
        if (json.has("isDiscount")) {
            if (json.isNull("isDiscount")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'isDiscount' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$isDiscount((boolean) json.getBoolean("isDiscount"));
            }
        }
        if (json.has("gstPerc")) {
            if (json.isNull("gstPerc")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'gstPerc' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$gstPerc((int) json.getInt("gstPerc"));
            }
        }
        if (json.has("cgst")) {
            if (json.isNull("cgst")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'cgst' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$cgst((int) json.getInt("cgst"));
            }
        }
        if (json.has("sgst")) {
            if (json.isNull("sgst")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'sgst' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$sgst((int) json.getInt("sgst"));
            }
        }
        if (json.has("salesPrice")) {
            if (json.isNull("salesPrice")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'salesPrice' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$salesPrice((int) json.getInt("salesPrice"));
            }
        }
        if (json.has("nrv")) {
            if (json.isNull("nrv")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'nrv' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$nrv((int) json.getInt("nrv"));
            }
        }
        if (json.has("gpl")) {
            if (json.isNull("gpl")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'gpl' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$gpl((int) json.getInt("gpl"));
            }
        }
        if (json.has("mrp")) {
            if (json.isNull("mrp")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'mrp' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$mrp((int) json.getInt("mrp"));
            }
        }
        if (json.has("barCodeNumber")) {
            if (json.isNull("barCodeNumber")) {
                ((DDRProductRealmProxyInterface) obj).realmSet$barCodeNumber(null);
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$barCodeNumber((String) json.getString("barCodeNumber"));
            }
        }
        if (json.has("points")) {
            if (json.isNull("points")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'points' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$points((int) json.getInt("points"));
            }
        }
        if (json.has("pointsBasedOn")) {
            if (json.isNull("pointsBasedOn")) {
                ((DDRProductRealmProxyInterface) obj).realmSet$pointsBasedOn(null);
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$pointsBasedOn((String) json.getString("pointsBasedOn"));
            }
        }
        if (json.has("valueFrom")) {
            if (json.isNull("valueFrom")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'valueFrom' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$valueFrom((int) json.getInt("valueFrom"));
            }
        }
        if (json.has("valueTo")) {
            if (json.isNull("valueTo")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'valueTo' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$valueTo((int) json.getInt("valueTo"));
            }
        }
        if (json.has("pointsPer")) {
            if (json.isNull("pointsPer")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'pointsPer' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$pointsPer((int) json.getInt("pointsPer"));
            }
        }
        if (json.has("isReserveStock")) {
            if (json.isNull("isReserveStock")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'isReserveStock' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$isReserveStock((boolean) json.getBoolean("isReserveStock"));
            }
        }
        if (json.has("isCheckStock")) {
            if (json.isNull("isCheckStock")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'isCheckStock' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$isCheckStock((boolean) json.getBoolean("isCheckStock"));
            }
        }
        if (json.has("isStockDisplay")) {
            if (json.isNull("isStockDisplay")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'isStockDisplay' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$isStockDisplay((boolean) json.getBoolean("isStockDisplay"));
            }
        }
        if (json.has("discount")) {
            if (json.isNull("discount")) {
                ((DDRProductRealmProxyInterface) obj).realmSet$discount(null);
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$discount((String) json.getString("discount"));
            }
        }
        if (json.has("isSync")) {
            if (json.isNull("isSync")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'isSync' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$isSync((boolean) json.getBoolean("isSync"));
            }
        }
        if (json.has("isUpdate")) {
            if (json.isNull("isUpdate")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'isUpdate' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$isUpdate((boolean) json.getBoolean("isUpdate"));
            }
        }
        if (json.has("OrderId")) {
            if (json.isNull("OrderId")) {
                ((DDRProductRealmProxyInterface) obj).realmSet$OrderId(null);
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$OrderId((String) json.getString("OrderId"));
            }
        }
        if (json.has("isAdded")) {
            if (json.isNull("isAdded")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'isAdded' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$isAdded((boolean) json.getBoolean("isAdded"));
            }
        }
        if (json.has("qty")) {
            if (json.isNull("qty")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'qty' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$qty((int) json.getInt("qty"));
            }
        }
        if (json.has("totalPrice")) {
            if (json.isNull("totalPrice")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'totalPrice' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$totalPrice((int) json.getInt("totalPrice"));
            }
        }
        if (json.has("discountPrice")) {
            if (json.isNull("discountPrice")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'discountPrice' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$discountPrice((double) json.getDouble("discountPrice"));
            }
        }
        if (json.has("totalPoints")) {
            if (json.isNull("totalPoints")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'totalPoints' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$totalPoints((int) json.getInt("totalPoints"));
            }
        }
        if (json.has("totalStock")) {
            if (json.isNull("totalStock")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'totalStock' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$totalStock((int) json.getInt("totalStock"));
            }
        }
        if (json.has("isFreeItem")) {
            if (json.isNull("isFreeItem")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'isFreeItem' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$isFreeItem((boolean) json.getBoolean("isFreeItem"));
            }
        }
        if (json.has("isRuleApplied")) {
            if (json.isNull("isRuleApplied")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'isRuleApplied' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$isRuleApplied((boolean) json.getBoolean("isRuleApplied"));
            }
        }
        if (json.has("parentProductId")) {
            if (json.isNull("parentProductId")) {
                ((DDRProductRealmProxyInterface) obj).realmSet$parentProductId(null);
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$parentProductId((String) json.getString("parentProductId"));
            }
        }
        if (json.has("mCheckStock")) {
            if (json.isNull("mCheckStock")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'mCheckStock' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$mCheckStock((int) json.getInt("mCheckStock"));
            }
        }
        if (json.has("checkStockClick")) {
            if (json.isNull("checkStockClick")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'checkStockClick' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$checkStockClick((boolean) json.getBoolean("checkStockClick"));
            }
        }
        if (json.has("accumulatedLoyality")) {
            if (json.isNull("accumulatedLoyality")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'accumulatedLoyality' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$accumulatedLoyality((double) json.getDouble("accumulatedLoyality"));
            }
        }
        if (json.has("pUOM")) {
            if (json.isNull("pUOM")) {
                ((DDRProductRealmProxyInterface) obj).realmSet$pUOM(null);
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$pUOM((String) json.getString("pUOM"));
            }
        }
        if (json.has("mUOM")) {
            if (json.isNull("mUOM")) {
                ((DDRProductRealmProxyInterface) obj).realmSet$mUOM(null);
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$mUOM((String) json.getString("mUOM"));
            }
        }
        if (json.has("conversionFactor")) {
            if (json.isNull("conversionFactor")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'conversionFactor' to null.");
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$conversionFactor((double) json.getDouble("conversionFactor"));
            }
        }
        if (json.has("brandName")) {
            if (json.isNull("brandName")) {
                ((DDRProductRealmProxyInterface) obj).realmSet$brandName(null);
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$brandName((String) json.getString("brandName"));
            }
        }
        if (json.has("subCategoryName")) {
            if (json.isNull("subCategoryName")) {
                ((DDRProductRealmProxyInterface) obj).realmSet$subCategoryName(null);
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$subCategoryName((String) json.getString("subCategoryName"));
            }
        }
        if (json.has("categoryName")) {
            if (json.isNull("categoryName")) {
                ((DDRProductRealmProxyInterface) obj).realmSet$categoryName(null);
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$categoryName((String) json.getString("categoryName"));
            }
        }
        if (json.has("hsnName")) {
            if (json.isNull("hsnName")) {
                ((DDRProductRealmProxyInterface) obj).realmSet$hsnName(null);
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$hsnName((String) json.getString("hsnName"));
            }
        }
        if (json.has("hsnCode")) {
            if (json.isNull("hsnCode")) {
                ((DDRProductRealmProxyInterface) obj).realmSet$hsnCode(null);
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$hsnCode((String) json.getString("hsnCode"));
            }
        }
        if (json.has("sProductFeature")) {
            if (json.isNull("sProductFeature")) {
                ((DDRProductRealmProxyInterface) obj).realmSet$sProductFeature(null);
            } else {
                ((DDRProductRealmProxyInterface) obj).realmSet$sProductFeature((String) json.getString("sProductFeature"));
            }
        }
        return obj;
    }

    @SuppressWarnings("cast")
    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
    public static quay.com.ipos.ddrsales.model.DDRProduct createUsingJsonStream(Realm realm, JsonReader reader)
        throws IOException {
        boolean jsonHasPrimaryKey = false;
        quay.com.ipos.ddrsales.model.DDRProduct obj = new quay.com.ipos.ddrsales.model.DDRProduct();
        reader.beginObject();
        while (reader.hasNext()) {
            String name = reader.nextName();
            if (false) {
            } else if (name.equals("iProductModalId")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    ((DDRProductRealmProxyInterface) obj).realmSet$iProductModalId(null);
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$iProductModalId((String) reader.nextString());
                }
                jsonHasPrimaryKey = true;
            } else if (name.equals("productCode")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    ((DDRProductRealmProxyInterface) obj).realmSet$productCode(null);
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$productCode((String) reader.nextString());
                }
            } else if (name.equals("sProductName")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    ((DDRProductRealmProxyInterface) obj).realmSet$sProductName(null);
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$sProductName((String) reader.nextString());
                }
            } else if (name.equals("productImage")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    ((DDRProductRealmProxyInterface) obj).realmSet$productImage(null);
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$productImage((String) reader.nextString());
                }
            } else if (name.equals("sProductPrice")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'sProductPrice' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$sProductPrice((int) reader.nextInt());
                }
            } else if (name.equals("sProductStock")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    ((DDRProductRealmProxyInterface) obj).realmSet$sProductStock(null);
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$sProductStock((String) reader.nextString());
                }
            } else if (name.equals("sProductWeight")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'sProductWeight' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$sProductWeight((int) reader.nextInt());
                }
            } else if (name.equals("isDiscount")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'isDiscount' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$isDiscount((boolean) reader.nextBoolean());
                }
            } else if (name.equals("gstPerc")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'gstPerc' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$gstPerc((int) reader.nextInt());
                }
            } else if (name.equals("cgst")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'cgst' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$cgst((int) reader.nextInt());
                }
            } else if (name.equals("sgst")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'sgst' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$sgst((int) reader.nextInt());
                }
            } else if (name.equals("salesPrice")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'salesPrice' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$salesPrice((int) reader.nextInt());
                }
            } else if (name.equals("nrv")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'nrv' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$nrv((int) reader.nextInt());
                }
            } else if (name.equals("gpl")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'gpl' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$gpl((int) reader.nextInt());
                }
            } else if (name.equals("mrp")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'mrp' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$mrp((int) reader.nextInt());
                }
            } else if (name.equals("barCodeNumber")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    ((DDRProductRealmProxyInterface) obj).realmSet$barCodeNumber(null);
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$barCodeNumber((String) reader.nextString());
                }
            } else if (name.equals("points")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'points' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$points((int) reader.nextInt());
                }
            } else if (name.equals("pointsBasedOn")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    ((DDRProductRealmProxyInterface) obj).realmSet$pointsBasedOn(null);
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$pointsBasedOn((String) reader.nextString());
                }
            } else if (name.equals("valueFrom")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'valueFrom' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$valueFrom((int) reader.nextInt());
                }
            } else if (name.equals("valueTo")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'valueTo' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$valueTo((int) reader.nextInt());
                }
            } else if (name.equals("pointsPer")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'pointsPer' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$pointsPer((int) reader.nextInt());
                }
            } else if (name.equals("isReserveStock")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'isReserveStock' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$isReserveStock((boolean) reader.nextBoolean());
                }
            } else if (name.equals("isCheckStock")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'isCheckStock' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$isCheckStock((boolean) reader.nextBoolean());
                }
            } else if (name.equals("isStockDisplay")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'isStockDisplay' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$isStockDisplay((boolean) reader.nextBoolean());
                }
            } else if (name.equals("discount")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    ((DDRProductRealmProxyInterface) obj).realmSet$discount(null);
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$discount((String) reader.nextString());
                }
            } else if (name.equals("isSync")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'isSync' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$isSync((boolean) reader.nextBoolean());
                }
            } else if (name.equals("isUpdate")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'isUpdate' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$isUpdate((boolean) reader.nextBoolean());
                }
            } else if (name.equals("OrderId")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    ((DDRProductRealmProxyInterface) obj).realmSet$OrderId(null);
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$OrderId((String) reader.nextString());
                }
            } else if (name.equals("isAdded")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'isAdded' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$isAdded((boolean) reader.nextBoolean());
                }
            } else if (name.equals("qty")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'qty' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$qty((int) reader.nextInt());
                }
            } else if (name.equals("totalPrice")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'totalPrice' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$totalPrice((int) reader.nextInt());
                }
            } else if (name.equals("discountPrice")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'discountPrice' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$discountPrice((double) reader.nextDouble());
                }
            } else if (name.equals("totalPoints")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'totalPoints' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$totalPoints((int) reader.nextInt());
                }
            } else if (name.equals("totalStock")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'totalStock' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$totalStock((int) reader.nextInt());
                }
            } else if (name.equals("isFreeItem")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'isFreeItem' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$isFreeItem((boolean) reader.nextBoolean());
                }
            } else if (name.equals("isRuleApplied")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'isRuleApplied' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$isRuleApplied((boolean) reader.nextBoolean());
                }
            } else if (name.equals("parentProductId")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    ((DDRProductRealmProxyInterface) obj).realmSet$parentProductId(null);
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$parentProductId((String) reader.nextString());
                }
            } else if (name.equals("mCheckStock")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'mCheckStock' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$mCheckStock((int) reader.nextInt());
                }
            } else if (name.equals("checkStockClick")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'checkStockClick' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$checkStockClick((boolean) reader.nextBoolean());
                }
            } else if (name.equals("accumulatedLoyality")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'accumulatedLoyality' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$accumulatedLoyality((double) reader.nextDouble());
                }
            } else if (name.equals("pUOM")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    ((DDRProductRealmProxyInterface) obj).realmSet$pUOM(null);
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$pUOM((String) reader.nextString());
                }
            } else if (name.equals("mUOM")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    ((DDRProductRealmProxyInterface) obj).realmSet$mUOM(null);
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$mUOM((String) reader.nextString());
                }
            } else if (name.equals("conversionFactor")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'conversionFactor' to null.");
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$conversionFactor((double) reader.nextDouble());
                }
            } else if (name.equals("brandName")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    ((DDRProductRealmProxyInterface) obj).realmSet$brandName(null);
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$brandName((String) reader.nextString());
                }
            } else if (name.equals("subCategoryName")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    ((DDRProductRealmProxyInterface) obj).realmSet$subCategoryName(null);
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$subCategoryName((String) reader.nextString());
                }
            } else if (name.equals("categoryName")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    ((DDRProductRealmProxyInterface) obj).realmSet$categoryName(null);
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$categoryName((String) reader.nextString());
                }
            } else if (name.equals("hsnName")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    ((DDRProductRealmProxyInterface) obj).realmSet$hsnName(null);
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$hsnName((String) reader.nextString());
                }
            } else if (name.equals("hsnCode")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    ((DDRProductRealmProxyInterface) obj).realmSet$hsnCode(null);
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$hsnCode((String) reader.nextString());
                }
            } else if (name.equals("sProductFeature")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    ((DDRProductRealmProxyInterface) obj).realmSet$sProductFeature(null);
                } else {
                    ((DDRProductRealmProxyInterface) obj).realmSet$sProductFeature((String) reader.nextString());
                }
            } else {
                reader.skipValue();
            }
        }
        reader.endObject();
        if (!jsonHasPrimaryKey) {
            throw new IllegalArgumentException("JSON object doesn't have the primary key field 'iProductModalId'.");
        }
        obj = realm.copyToRealm(obj);
        return obj;
    }

    public static quay.com.ipos.ddrsales.model.DDRProduct copyOrUpdate(Realm realm, quay.com.ipos.ddrsales.model.DDRProduct object, boolean update, Map<RealmModel,RealmObjectProxy> cache) {
        if (object instanceof RealmObjectProxy && ((RealmObjectProxy) object).realmGet$proxyState().getRealm$realm() != null && ((RealmObjectProxy) object).realmGet$proxyState().getRealm$realm().threadId != realm.threadId) {
            throw new IllegalArgumentException("Objects which belong to Realm instances in other threads cannot be copied into this Realm instance.");
        }
        if (object instanceof RealmObjectProxy && ((RealmObjectProxy)object).realmGet$proxyState().getRealm$realm() != null && ((RealmObjectProxy)object).realmGet$proxyState().getRealm$realm().getPath().equals(realm.getPath())) {
            return object;
        }
        final BaseRealm.RealmObjectContext objectContext = BaseRealm.objectContext.get();
        RealmObjectProxy cachedRealmObject = cache.get(object);
        if (cachedRealmObject != null) {
            return (quay.com.ipos.ddrsales.model.DDRProduct) cachedRealmObject;
        } else {
            quay.com.ipos.ddrsales.model.DDRProduct realmObject = null;
            boolean canUpdate = update;
            if (canUpdate) {
                Table table = realm.getTable(quay.com.ipos.ddrsales.model.DDRProduct.class);
                long pkColumnIndex = table.getPrimaryKey();
                String value = ((DDRProductRealmProxyInterface) object).realmGet$iProductModalId();
                long rowIndex = Table.NO_MATCH;
                if (value == null) {
                    rowIndex = table.findFirstNull(pkColumnIndex);
                } else {
                    rowIndex = table.findFirstString(pkColumnIndex, value);
                }
                if (rowIndex != Table.NO_MATCH) {
                    try {
                        objectContext.set(realm, table.getUncheckedRow(rowIndex), realm.schema.getColumnInfo(quay.com.ipos.ddrsales.model.DDRProduct.class), false, Collections.<String> emptyList());
                        realmObject = new io.realm.DDRProductRealmProxy();
                        cache.put(object, (RealmObjectProxy) realmObject);
                    } finally {
                        objectContext.clear();
                    }
                } else {
                    canUpdate = false;
                }
            }

            if (canUpdate) {
                return update(realm, realmObject, object, cache);
            } else {
                return copy(realm, object, update, cache);
            }
        }
    }

    public static quay.com.ipos.ddrsales.model.DDRProduct copy(Realm realm, quay.com.ipos.ddrsales.model.DDRProduct newObject, boolean update, Map<RealmModel,RealmObjectProxy> cache) {
        RealmObjectProxy cachedRealmObject = cache.get(newObject);
        if (cachedRealmObject != null) {
            return (quay.com.ipos.ddrsales.model.DDRProduct) cachedRealmObject;
        } else {
            // rejecting default values to avoid creating unexpected objects from RealmModel/RealmList fields.
            quay.com.ipos.ddrsales.model.DDRProduct realmObject = realm.createObjectInternal(quay.com.ipos.ddrsales.model.DDRProduct.class, ((DDRProductRealmProxyInterface) newObject).realmGet$iProductModalId(), false, Collections.<String>emptyList());
            cache.put(newObject, (RealmObjectProxy) realmObject);
            ((DDRProductRealmProxyInterface) realmObject).realmSet$productCode(((DDRProductRealmProxyInterface) newObject).realmGet$productCode());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$sProductName(((DDRProductRealmProxyInterface) newObject).realmGet$sProductName());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$productImage(((DDRProductRealmProxyInterface) newObject).realmGet$productImage());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$sProductPrice(((DDRProductRealmProxyInterface) newObject).realmGet$sProductPrice());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$sProductStock(((DDRProductRealmProxyInterface) newObject).realmGet$sProductStock());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$sProductWeight(((DDRProductRealmProxyInterface) newObject).realmGet$sProductWeight());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$isDiscount(((DDRProductRealmProxyInterface) newObject).realmGet$isDiscount());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$gstPerc(((DDRProductRealmProxyInterface) newObject).realmGet$gstPerc());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$cgst(((DDRProductRealmProxyInterface) newObject).realmGet$cgst());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$sgst(((DDRProductRealmProxyInterface) newObject).realmGet$sgst());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$salesPrice(((DDRProductRealmProxyInterface) newObject).realmGet$salesPrice());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$nrv(((DDRProductRealmProxyInterface) newObject).realmGet$nrv());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$gpl(((DDRProductRealmProxyInterface) newObject).realmGet$gpl());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$mrp(((DDRProductRealmProxyInterface) newObject).realmGet$mrp());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$barCodeNumber(((DDRProductRealmProxyInterface) newObject).realmGet$barCodeNumber());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$points(((DDRProductRealmProxyInterface) newObject).realmGet$points());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$pointsBasedOn(((DDRProductRealmProxyInterface) newObject).realmGet$pointsBasedOn());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$valueFrom(((DDRProductRealmProxyInterface) newObject).realmGet$valueFrom());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$valueTo(((DDRProductRealmProxyInterface) newObject).realmGet$valueTo());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$pointsPer(((DDRProductRealmProxyInterface) newObject).realmGet$pointsPer());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$isReserveStock(((DDRProductRealmProxyInterface) newObject).realmGet$isReserveStock());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$isCheckStock(((DDRProductRealmProxyInterface) newObject).realmGet$isCheckStock());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$isStockDisplay(((DDRProductRealmProxyInterface) newObject).realmGet$isStockDisplay());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$discount(((DDRProductRealmProxyInterface) newObject).realmGet$discount());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$isSync(((DDRProductRealmProxyInterface) newObject).realmGet$isSync());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$isUpdate(((DDRProductRealmProxyInterface) newObject).realmGet$isUpdate());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$OrderId(((DDRProductRealmProxyInterface) newObject).realmGet$OrderId());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$isAdded(((DDRProductRealmProxyInterface) newObject).realmGet$isAdded());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$qty(((DDRProductRealmProxyInterface) newObject).realmGet$qty());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$totalPrice(((DDRProductRealmProxyInterface) newObject).realmGet$totalPrice());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$discountPrice(((DDRProductRealmProxyInterface) newObject).realmGet$discountPrice());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$totalPoints(((DDRProductRealmProxyInterface) newObject).realmGet$totalPoints());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$totalStock(((DDRProductRealmProxyInterface) newObject).realmGet$totalStock());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$isFreeItem(((DDRProductRealmProxyInterface) newObject).realmGet$isFreeItem());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$isRuleApplied(((DDRProductRealmProxyInterface) newObject).realmGet$isRuleApplied());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$parentProductId(((DDRProductRealmProxyInterface) newObject).realmGet$parentProductId());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$mCheckStock(((DDRProductRealmProxyInterface) newObject).realmGet$mCheckStock());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$checkStockClick(((DDRProductRealmProxyInterface) newObject).realmGet$checkStockClick());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$accumulatedLoyality(((DDRProductRealmProxyInterface) newObject).realmGet$accumulatedLoyality());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$pUOM(((DDRProductRealmProxyInterface) newObject).realmGet$pUOM());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$mUOM(((DDRProductRealmProxyInterface) newObject).realmGet$mUOM());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$conversionFactor(((DDRProductRealmProxyInterface) newObject).realmGet$conversionFactor());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$brandName(((DDRProductRealmProxyInterface) newObject).realmGet$brandName());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$subCategoryName(((DDRProductRealmProxyInterface) newObject).realmGet$subCategoryName());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$categoryName(((DDRProductRealmProxyInterface) newObject).realmGet$categoryName());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$hsnName(((DDRProductRealmProxyInterface) newObject).realmGet$hsnName());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$hsnCode(((DDRProductRealmProxyInterface) newObject).realmGet$hsnCode());
            ((DDRProductRealmProxyInterface) realmObject).realmSet$sProductFeature(((DDRProductRealmProxyInterface) newObject).realmGet$sProductFeature());
            return realmObject;
        }
    }

    public static long insert(Realm realm, quay.com.ipos.ddrsales.model.DDRProduct object, Map<RealmModel,Long> cache) {
        if (object instanceof RealmObjectProxy && ((RealmObjectProxy)object).realmGet$proxyState().getRealm$realm() != null && ((RealmObjectProxy)object).realmGet$proxyState().getRealm$realm().getPath().equals(realm.getPath())) {
            return ((RealmObjectProxy)object).realmGet$proxyState().getRow$realm().getIndex();
        }
        Table table = realm.getTable(quay.com.ipos.ddrsales.model.DDRProduct.class);
        long tableNativePtr = table.getNativeTablePointer();
        DDRProductColumnInfo columnInfo = (DDRProductColumnInfo) realm.schema.getColumnInfo(quay.com.ipos.ddrsales.model.DDRProduct.class);
        long pkColumnIndex = table.getPrimaryKey();
        String primaryKeyValue = ((DDRProductRealmProxyInterface) object).realmGet$iProductModalId();
        long rowIndex = Table.NO_MATCH;
        if (primaryKeyValue == null) {
            rowIndex = Table.nativeFindFirstNull(tableNativePtr, pkColumnIndex);
        } else {
            rowIndex = Table.nativeFindFirstString(tableNativePtr, pkColumnIndex, primaryKeyValue);
        }
        if (rowIndex == Table.NO_MATCH) {
            rowIndex = table.addEmptyRowWithPrimaryKey(primaryKeyValue, false);
        } else {
            Table.throwDuplicatePrimaryKeyException(primaryKeyValue);
        }
        cache.put(object, rowIndex);
        String realmGet$productCode = ((DDRProductRealmProxyInterface)object).realmGet$productCode();
        if (realmGet$productCode != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.productCodeIndex, rowIndex, realmGet$productCode, false);
        }
        String realmGet$sProductName = ((DDRProductRealmProxyInterface)object).realmGet$sProductName();
        if (realmGet$sProductName != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.sProductNameIndex, rowIndex, realmGet$sProductName, false);
        }
        String realmGet$productImage = ((DDRProductRealmProxyInterface)object).realmGet$productImage();
        if (realmGet$productImage != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.productImageIndex, rowIndex, realmGet$productImage, false);
        }
        Table.nativeSetLong(tableNativePtr, columnInfo.sProductPriceIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$sProductPrice(), false);
        String realmGet$sProductStock = ((DDRProductRealmProxyInterface)object).realmGet$sProductStock();
        if (realmGet$sProductStock != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.sProductStockIndex, rowIndex, realmGet$sProductStock, false);
        }
        Table.nativeSetLong(tableNativePtr, columnInfo.sProductWeightIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$sProductWeight(), false);
        Table.nativeSetBoolean(tableNativePtr, columnInfo.isDiscountIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isDiscount(), false);
        Table.nativeSetLong(tableNativePtr, columnInfo.gstPercIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$gstPerc(), false);
        Table.nativeSetLong(tableNativePtr, columnInfo.cgstIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$cgst(), false);
        Table.nativeSetLong(tableNativePtr, columnInfo.sgstIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$sgst(), false);
        Table.nativeSetLong(tableNativePtr, columnInfo.salesPriceIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$salesPrice(), false);
        Table.nativeSetLong(tableNativePtr, columnInfo.nrvIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$nrv(), false);
        Table.nativeSetLong(tableNativePtr, columnInfo.gplIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$gpl(), false);
        Table.nativeSetLong(tableNativePtr, columnInfo.mrpIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$mrp(), false);
        String realmGet$barCodeNumber = ((DDRProductRealmProxyInterface)object).realmGet$barCodeNumber();
        if (realmGet$barCodeNumber != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.barCodeNumberIndex, rowIndex, realmGet$barCodeNumber, false);
        }
        Table.nativeSetLong(tableNativePtr, columnInfo.pointsIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$points(), false);
        String realmGet$pointsBasedOn = ((DDRProductRealmProxyInterface)object).realmGet$pointsBasedOn();
        if (realmGet$pointsBasedOn != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.pointsBasedOnIndex, rowIndex, realmGet$pointsBasedOn, false);
        }
        Table.nativeSetLong(tableNativePtr, columnInfo.valueFromIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$valueFrom(), false);
        Table.nativeSetLong(tableNativePtr, columnInfo.valueToIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$valueTo(), false);
        Table.nativeSetLong(tableNativePtr, columnInfo.pointsPerIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$pointsPer(), false);
        Table.nativeSetBoolean(tableNativePtr, columnInfo.isReserveStockIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isReserveStock(), false);
        Table.nativeSetBoolean(tableNativePtr, columnInfo.isCheckStockIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isCheckStock(), false);
        Table.nativeSetBoolean(tableNativePtr, columnInfo.isStockDisplayIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isStockDisplay(), false);
        String realmGet$discount = ((DDRProductRealmProxyInterface)object).realmGet$discount();
        if (realmGet$discount != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.discountIndex, rowIndex, realmGet$discount, false);
        }
        Table.nativeSetBoolean(tableNativePtr, columnInfo.isSyncIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isSync(), false);
        Table.nativeSetBoolean(tableNativePtr, columnInfo.isUpdateIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isUpdate(), false);
        String realmGet$OrderId = ((DDRProductRealmProxyInterface)object).realmGet$OrderId();
        if (realmGet$OrderId != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.OrderIdIndex, rowIndex, realmGet$OrderId, false);
        }
        Table.nativeSetBoolean(tableNativePtr, columnInfo.isAddedIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isAdded(), false);
        Table.nativeSetLong(tableNativePtr, columnInfo.qtyIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$qty(), false);
        Table.nativeSetLong(tableNativePtr, columnInfo.totalPriceIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$totalPrice(), false);
        Table.nativeSetDouble(tableNativePtr, columnInfo.discountPriceIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$discountPrice(), false);
        Table.nativeSetLong(tableNativePtr, columnInfo.totalPointsIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$totalPoints(), false);
        Table.nativeSetLong(tableNativePtr, columnInfo.totalStockIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$totalStock(), false);
        Table.nativeSetBoolean(tableNativePtr, columnInfo.isFreeItemIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isFreeItem(), false);
        Table.nativeSetBoolean(tableNativePtr, columnInfo.isRuleAppliedIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isRuleApplied(), false);
        String realmGet$parentProductId = ((DDRProductRealmProxyInterface)object).realmGet$parentProductId();
        if (realmGet$parentProductId != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.parentProductIdIndex, rowIndex, realmGet$parentProductId, false);
        }
        Table.nativeSetLong(tableNativePtr, columnInfo.mCheckStockIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$mCheckStock(), false);
        Table.nativeSetBoolean(tableNativePtr, columnInfo.checkStockClickIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$checkStockClick(), false);
        Table.nativeSetDouble(tableNativePtr, columnInfo.accumulatedLoyalityIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$accumulatedLoyality(), false);
        String realmGet$pUOM = ((DDRProductRealmProxyInterface)object).realmGet$pUOM();
        if (realmGet$pUOM != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.pUOMIndex, rowIndex, realmGet$pUOM, false);
        }
        String realmGet$mUOM = ((DDRProductRealmProxyInterface)object).realmGet$mUOM();
        if (realmGet$mUOM != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.mUOMIndex, rowIndex, realmGet$mUOM, false);
        }
        Table.nativeSetDouble(tableNativePtr, columnInfo.conversionFactorIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$conversionFactor(), false);
        String realmGet$brandName = ((DDRProductRealmProxyInterface)object).realmGet$brandName();
        if (realmGet$brandName != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.brandNameIndex, rowIndex, realmGet$brandName, false);
        }
        String realmGet$subCategoryName = ((DDRProductRealmProxyInterface)object).realmGet$subCategoryName();
        if (realmGet$subCategoryName != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.subCategoryNameIndex, rowIndex, realmGet$subCategoryName, false);
        }
        String realmGet$categoryName = ((DDRProductRealmProxyInterface)object).realmGet$categoryName();
        if (realmGet$categoryName != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.categoryNameIndex, rowIndex, realmGet$categoryName, false);
        }
        String realmGet$hsnName = ((DDRProductRealmProxyInterface)object).realmGet$hsnName();
        if (realmGet$hsnName != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.hsnNameIndex, rowIndex, realmGet$hsnName, false);
        }
        String realmGet$hsnCode = ((DDRProductRealmProxyInterface)object).realmGet$hsnCode();
        if (realmGet$hsnCode != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.hsnCodeIndex, rowIndex, realmGet$hsnCode, false);
        }
        String realmGet$sProductFeature = ((DDRProductRealmProxyInterface)object).realmGet$sProductFeature();
        if (realmGet$sProductFeature != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.sProductFeatureIndex, rowIndex, realmGet$sProductFeature, false);
        }
        return rowIndex;
    }

    public static void insert(Realm realm, Iterator<? extends RealmModel> objects, Map<RealmModel,Long> cache) {
        Table table = realm.getTable(quay.com.ipos.ddrsales.model.DDRProduct.class);
        long tableNativePtr = table.getNativeTablePointer();
        DDRProductColumnInfo columnInfo = (DDRProductColumnInfo) realm.schema.getColumnInfo(quay.com.ipos.ddrsales.model.DDRProduct.class);
        long pkColumnIndex = table.getPrimaryKey();
        quay.com.ipos.ddrsales.model.DDRProduct object = null;
        while (objects.hasNext()) {
            object = (quay.com.ipos.ddrsales.model.DDRProduct) objects.next();
            if(!cache.containsKey(object)) {
                if (object instanceof RealmObjectProxy && ((RealmObjectProxy)object).realmGet$proxyState().getRealm$realm() != null && ((RealmObjectProxy)object).realmGet$proxyState().getRealm$realm().getPath().equals(realm.getPath())) {
                    cache.put(object, ((RealmObjectProxy)object).realmGet$proxyState().getRow$realm().getIndex());
                    continue;
                }
                String primaryKeyValue = ((DDRProductRealmProxyInterface) object).realmGet$iProductModalId();
                long rowIndex = Table.NO_MATCH;
                if (primaryKeyValue == null) {
                    rowIndex = Table.nativeFindFirstNull(tableNativePtr, pkColumnIndex);
                } else {
                    rowIndex = Table.nativeFindFirstString(tableNativePtr, pkColumnIndex, primaryKeyValue);
                }
                if (rowIndex == Table.NO_MATCH) {
                    rowIndex = table.addEmptyRowWithPrimaryKey(primaryKeyValue, false);
                } else {
                    Table.throwDuplicatePrimaryKeyException(primaryKeyValue);
                }
                cache.put(object, rowIndex);
                String realmGet$productCode = ((DDRProductRealmProxyInterface)object).realmGet$productCode();
                if (realmGet$productCode != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.productCodeIndex, rowIndex, realmGet$productCode, false);
                }
                String realmGet$sProductName = ((DDRProductRealmProxyInterface)object).realmGet$sProductName();
                if (realmGet$sProductName != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.sProductNameIndex, rowIndex, realmGet$sProductName, false);
                }
                String realmGet$productImage = ((DDRProductRealmProxyInterface)object).realmGet$productImage();
                if (realmGet$productImage != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.productImageIndex, rowIndex, realmGet$productImage, false);
                }
                Table.nativeSetLong(tableNativePtr, columnInfo.sProductPriceIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$sProductPrice(), false);
                String realmGet$sProductStock = ((DDRProductRealmProxyInterface)object).realmGet$sProductStock();
                if (realmGet$sProductStock != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.sProductStockIndex, rowIndex, realmGet$sProductStock, false);
                }
                Table.nativeSetLong(tableNativePtr, columnInfo.sProductWeightIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$sProductWeight(), false);
                Table.nativeSetBoolean(tableNativePtr, columnInfo.isDiscountIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isDiscount(), false);
                Table.nativeSetLong(tableNativePtr, columnInfo.gstPercIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$gstPerc(), false);
                Table.nativeSetLong(tableNativePtr, columnInfo.cgstIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$cgst(), false);
                Table.nativeSetLong(tableNativePtr, columnInfo.sgstIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$sgst(), false);
                Table.nativeSetLong(tableNativePtr, columnInfo.salesPriceIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$salesPrice(), false);
                Table.nativeSetLong(tableNativePtr, columnInfo.nrvIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$nrv(), false);
                Table.nativeSetLong(tableNativePtr, columnInfo.gplIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$gpl(), false);
                Table.nativeSetLong(tableNativePtr, columnInfo.mrpIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$mrp(), false);
                String realmGet$barCodeNumber = ((DDRProductRealmProxyInterface)object).realmGet$barCodeNumber();
                if (realmGet$barCodeNumber != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.barCodeNumberIndex, rowIndex, realmGet$barCodeNumber, false);
                }
                Table.nativeSetLong(tableNativePtr, columnInfo.pointsIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$points(), false);
                String realmGet$pointsBasedOn = ((DDRProductRealmProxyInterface)object).realmGet$pointsBasedOn();
                if (realmGet$pointsBasedOn != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.pointsBasedOnIndex, rowIndex, realmGet$pointsBasedOn, false);
                }
                Table.nativeSetLong(tableNativePtr, columnInfo.valueFromIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$valueFrom(), false);
                Table.nativeSetLong(tableNativePtr, columnInfo.valueToIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$valueTo(), false);
                Table.nativeSetLong(tableNativePtr, columnInfo.pointsPerIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$pointsPer(), false);
                Table.nativeSetBoolean(tableNativePtr, columnInfo.isReserveStockIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isReserveStock(), false);
                Table.nativeSetBoolean(tableNativePtr, columnInfo.isCheckStockIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isCheckStock(), false);
                Table.nativeSetBoolean(tableNativePtr, columnInfo.isStockDisplayIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isStockDisplay(), false);
                String realmGet$discount = ((DDRProductRealmProxyInterface)object).realmGet$discount();
                if (realmGet$discount != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.discountIndex, rowIndex, realmGet$discount, false);
                }
                Table.nativeSetBoolean(tableNativePtr, columnInfo.isSyncIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isSync(), false);
                Table.nativeSetBoolean(tableNativePtr, columnInfo.isUpdateIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isUpdate(), false);
                String realmGet$OrderId = ((DDRProductRealmProxyInterface)object).realmGet$OrderId();
                if (realmGet$OrderId != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.OrderIdIndex, rowIndex, realmGet$OrderId, false);
                }
                Table.nativeSetBoolean(tableNativePtr, columnInfo.isAddedIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isAdded(), false);
                Table.nativeSetLong(tableNativePtr, columnInfo.qtyIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$qty(), false);
                Table.nativeSetLong(tableNativePtr, columnInfo.totalPriceIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$totalPrice(), false);
                Table.nativeSetDouble(tableNativePtr, columnInfo.discountPriceIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$discountPrice(), false);
                Table.nativeSetLong(tableNativePtr, columnInfo.totalPointsIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$totalPoints(), false);
                Table.nativeSetLong(tableNativePtr, columnInfo.totalStockIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$totalStock(), false);
                Table.nativeSetBoolean(tableNativePtr, columnInfo.isFreeItemIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isFreeItem(), false);
                Table.nativeSetBoolean(tableNativePtr, columnInfo.isRuleAppliedIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isRuleApplied(), false);
                String realmGet$parentProductId = ((DDRProductRealmProxyInterface)object).realmGet$parentProductId();
                if (realmGet$parentProductId != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.parentProductIdIndex, rowIndex, realmGet$parentProductId, false);
                }
                Table.nativeSetLong(tableNativePtr, columnInfo.mCheckStockIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$mCheckStock(), false);
                Table.nativeSetBoolean(tableNativePtr, columnInfo.checkStockClickIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$checkStockClick(), false);
                Table.nativeSetDouble(tableNativePtr, columnInfo.accumulatedLoyalityIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$accumulatedLoyality(), false);
                String realmGet$pUOM = ((DDRProductRealmProxyInterface)object).realmGet$pUOM();
                if (realmGet$pUOM != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.pUOMIndex, rowIndex, realmGet$pUOM, false);
                }
                String realmGet$mUOM = ((DDRProductRealmProxyInterface)object).realmGet$mUOM();
                if (realmGet$mUOM != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.mUOMIndex, rowIndex, realmGet$mUOM, false);
                }
                Table.nativeSetDouble(tableNativePtr, columnInfo.conversionFactorIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$conversionFactor(), false);
                String realmGet$brandName = ((DDRProductRealmProxyInterface)object).realmGet$brandName();
                if (realmGet$brandName != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.brandNameIndex, rowIndex, realmGet$brandName, false);
                }
                String realmGet$subCategoryName = ((DDRProductRealmProxyInterface)object).realmGet$subCategoryName();
                if (realmGet$subCategoryName != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.subCategoryNameIndex, rowIndex, realmGet$subCategoryName, false);
                }
                String realmGet$categoryName = ((DDRProductRealmProxyInterface)object).realmGet$categoryName();
                if (realmGet$categoryName != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.categoryNameIndex, rowIndex, realmGet$categoryName, false);
                }
                String realmGet$hsnName = ((DDRProductRealmProxyInterface)object).realmGet$hsnName();
                if (realmGet$hsnName != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.hsnNameIndex, rowIndex, realmGet$hsnName, false);
                }
                String realmGet$hsnCode = ((DDRProductRealmProxyInterface)object).realmGet$hsnCode();
                if (realmGet$hsnCode != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.hsnCodeIndex, rowIndex, realmGet$hsnCode, false);
                }
                String realmGet$sProductFeature = ((DDRProductRealmProxyInterface)object).realmGet$sProductFeature();
                if (realmGet$sProductFeature != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.sProductFeatureIndex, rowIndex, realmGet$sProductFeature, false);
                }
            }
        }
    }

    public static long insertOrUpdate(Realm realm, quay.com.ipos.ddrsales.model.DDRProduct object, Map<RealmModel,Long> cache) {
        if (object instanceof RealmObjectProxy && ((RealmObjectProxy)object).realmGet$proxyState().getRealm$realm() != null && ((RealmObjectProxy)object).realmGet$proxyState().getRealm$realm().getPath().equals(realm.getPath())) {
            return ((RealmObjectProxy)object).realmGet$proxyState().getRow$realm().getIndex();
        }
        Table table = realm.getTable(quay.com.ipos.ddrsales.model.DDRProduct.class);
        long tableNativePtr = table.getNativeTablePointer();
        DDRProductColumnInfo columnInfo = (DDRProductColumnInfo) realm.schema.getColumnInfo(quay.com.ipos.ddrsales.model.DDRProduct.class);
        long pkColumnIndex = table.getPrimaryKey();
        String primaryKeyValue = ((DDRProductRealmProxyInterface) object).realmGet$iProductModalId();
        long rowIndex = Table.NO_MATCH;
        if (primaryKeyValue == null) {
            rowIndex = Table.nativeFindFirstNull(tableNativePtr, pkColumnIndex);
        } else {
            rowIndex = Table.nativeFindFirstString(tableNativePtr, pkColumnIndex, primaryKeyValue);
        }
        if (rowIndex == Table.NO_MATCH) {
            rowIndex = table.addEmptyRowWithPrimaryKey(primaryKeyValue, false);
        }
        cache.put(object, rowIndex);
        String realmGet$productCode = ((DDRProductRealmProxyInterface)object).realmGet$productCode();
        if (realmGet$productCode != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.productCodeIndex, rowIndex, realmGet$productCode, false);
        } else {
            Table.nativeSetNull(tableNativePtr, columnInfo.productCodeIndex, rowIndex, false);
        }
        String realmGet$sProductName = ((DDRProductRealmProxyInterface)object).realmGet$sProductName();
        if (realmGet$sProductName != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.sProductNameIndex, rowIndex, realmGet$sProductName, false);
        } else {
            Table.nativeSetNull(tableNativePtr, columnInfo.sProductNameIndex, rowIndex, false);
        }
        String realmGet$productImage = ((DDRProductRealmProxyInterface)object).realmGet$productImage();
        if (realmGet$productImage != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.productImageIndex, rowIndex, realmGet$productImage, false);
        } else {
            Table.nativeSetNull(tableNativePtr, columnInfo.productImageIndex, rowIndex, false);
        }
        Table.nativeSetLong(tableNativePtr, columnInfo.sProductPriceIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$sProductPrice(), false);
        String realmGet$sProductStock = ((DDRProductRealmProxyInterface)object).realmGet$sProductStock();
        if (realmGet$sProductStock != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.sProductStockIndex, rowIndex, realmGet$sProductStock, false);
        } else {
            Table.nativeSetNull(tableNativePtr, columnInfo.sProductStockIndex, rowIndex, false);
        }
        Table.nativeSetLong(tableNativePtr, columnInfo.sProductWeightIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$sProductWeight(), false);
        Table.nativeSetBoolean(tableNativePtr, columnInfo.isDiscountIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isDiscount(), false);
        Table.nativeSetLong(tableNativePtr, columnInfo.gstPercIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$gstPerc(), false);
        Table.nativeSetLong(tableNativePtr, columnInfo.cgstIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$cgst(), false);
        Table.nativeSetLong(tableNativePtr, columnInfo.sgstIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$sgst(), false);
        Table.nativeSetLong(tableNativePtr, columnInfo.salesPriceIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$salesPrice(), false);
        Table.nativeSetLong(tableNativePtr, columnInfo.nrvIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$nrv(), false);
        Table.nativeSetLong(tableNativePtr, columnInfo.gplIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$gpl(), false);
        Table.nativeSetLong(tableNativePtr, columnInfo.mrpIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$mrp(), false);
        String realmGet$barCodeNumber = ((DDRProductRealmProxyInterface)object).realmGet$barCodeNumber();
        if (realmGet$barCodeNumber != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.barCodeNumberIndex, rowIndex, realmGet$barCodeNumber, false);
        } else {
            Table.nativeSetNull(tableNativePtr, columnInfo.barCodeNumberIndex, rowIndex, false);
        }
        Table.nativeSetLong(tableNativePtr, columnInfo.pointsIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$points(), false);
        String realmGet$pointsBasedOn = ((DDRProductRealmProxyInterface)object).realmGet$pointsBasedOn();
        if (realmGet$pointsBasedOn != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.pointsBasedOnIndex, rowIndex, realmGet$pointsBasedOn, false);
        } else {
            Table.nativeSetNull(tableNativePtr, columnInfo.pointsBasedOnIndex, rowIndex, false);
        }
        Table.nativeSetLong(tableNativePtr, columnInfo.valueFromIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$valueFrom(), false);
        Table.nativeSetLong(tableNativePtr, columnInfo.valueToIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$valueTo(), false);
        Table.nativeSetLong(tableNativePtr, columnInfo.pointsPerIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$pointsPer(), false);
        Table.nativeSetBoolean(tableNativePtr, columnInfo.isReserveStockIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isReserveStock(), false);
        Table.nativeSetBoolean(tableNativePtr, columnInfo.isCheckStockIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isCheckStock(), false);
        Table.nativeSetBoolean(tableNativePtr, columnInfo.isStockDisplayIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isStockDisplay(), false);
        String realmGet$discount = ((DDRProductRealmProxyInterface)object).realmGet$discount();
        if (realmGet$discount != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.discountIndex, rowIndex, realmGet$discount, false);
        } else {
            Table.nativeSetNull(tableNativePtr, columnInfo.discountIndex, rowIndex, false);
        }
        Table.nativeSetBoolean(tableNativePtr, columnInfo.isSyncIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isSync(), false);
        Table.nativeSetBoolean(tableNativePtr, columnInfo.isUpdateIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isUpdate(), false);
        String realmGet$OrderId = ((DDRProductRealmProxyInterface)object).realmGet$OrderId();
        if (realmGet$OrderId != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.OrderIdIndex, rowIndex, realmGet$OrderId, false);
        } else {
            Table.nativeSetNull(tableNativePtr, columnInfo.OrderIdIndex, rowIndex, false);
        }
        Table.nativeSetBoolean(tableNativePtr, columnInfo.isAddedIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isAdded(), false);
        Table.nativeSetLong(tableNativePtr, columnInfo.qtyIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$qty(), false);
        Table.nativeSetLong(tableNativePtr, columnInfo.totalPriceIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$totalPrice(), false);
        Table.nativeSetDouble(tableNativePtr, columnInfo.discountPriceIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$discountPrice(), false);
        Table.nativeSetLong(tableNativePtr, columnInfo.totalPointsIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$totalPoints(), false);
        Table.nativeSetLong(tableNativePtr, columnInfo.totalStockIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$totalStock(), false);
        Table.nativeSetBoolean(tableNativePtr, columnInfo.isFreeItemIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isFreeItem(), false);
        Table.nativeSetBoolean(tableNativePtr, columnInfo.isRuleAppliedIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isRuleApplied(), false);
        String realmGet$parentProductId = ((DDRProductRealmProxyInterface)object).realmGet$parentProductId();
        if (realmGet$parentProductId != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.parentProductIdIndex, rowIndex, realmGet$parentProductId, false);
        } else {
            Table.nativeSetNull(tableNativePtr, columnInfo.parentProductIdIndex, rowIndex, false);
        }
        Table.nativeSetLong(tableNativePtr, columnInfo.mCheckStockIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$mCheckStock(), false);
        Table.nativeSetBoolean(tableNativePtr, columnInfo.checkStockClickIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$checkStockClick(), false);
        Table.nativeSetDouble(tableNativePtr, columnInfo.accumulatedLoyalityIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$accumulatedLoyality(), false);
        String realmGet$pUOM = ((DDRProductRealmProxyInterface)object).realmGet$pUOM();
        if (realmGet$pUOM != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.pUOMIndex, rowIndex, realmGet$pUOM, false);
        } else {
            Table.nativeSetNull(tableNativePtr, columnInfo.pUOMIndex, rowIndex, false);
        }
        String realmGet$mUOM = ((DDRProductRealmProxyInterface)object).realmGet$mUOM();
        if (realmGet$mUOM != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.mUOMIndex, rowIndex, realmGet$mUOM, false);
        } else {
            Table.nativeSetNull(tableNativePtr, columnInfo.mUOMIndex, rowIndex, false);
        }
        Table.nativeSetDouble(tableNativePtr, columnInfo.conversionFactorIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$conversionFactor(), false);
        String realmGet$brandName = ((DDRProductRealmProxyInterface)object).realmGet$brandName();
        if (realmGet$brandName != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.brandNameIndex, rowIndex, realmGet$brandName, false);
        } else {
            Table.nativeSetNull(tableNativePtr, columnInfo.brandNameIndex, rowIndex, false);
        }
        String realmGet$subCategoryName = ((DDRProductRealmProxyInterface)object).realmGet$subCategoryName();
        if (realmGet$subCategoryName != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.subCategoryNameIndex, rowIndex, realmGet$subCategoryName, false);
        } else {
            Table.nativeSetNull(tableNativePtr, columnInfo.subCategoryNameIndex, rowIndex, false);
        }
        String realmGet$categoryName = ((DDRProductRealmProxyInterface)object).realmGet$categoryName();
        if (realmGet$categoryName != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.categoryNameIndex, rowIndex, realmGet$categoryName, false);
        } else {
            Table.nativeSetNull(tableNativePtr, columnInfo.categoryNameIndex, rowIndex, false);
        }
        String realmGet$hsnName = ((DDRProductRealmProxyInterface)object).realmGet$hsnName();
        if (realmGet$hsnName != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.hsnNameIndex, rowIndex, realmGet$hsnName, false);
        } else {
            Table.nativeSetNull(tableNativePtr, columnInfo.hsnNameIndex, rowIndex, false);
        }
        String realmGet$hsnCode = ((DDRProductRealmProxyInterface)object).realmGet$hsnCode();
        if (realmGet$hsnCode != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.hsnCodeIndex, rowIndex, realmGet$hsnCode, false);
        } else {
            Table.nativeSetNull(tableNativePtr, columnInfo.hsnCodeIndex, rowIndex, false);
        }
        String realmGet$sProductFeature = ((DDRProductRealmProxyInterface)object).realmGet$sProductFeature();
        if (realmGet$sProductFeature != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.sProductFeatureIndex, rowIndex, realmGet$sProductFeature, false);
        } else {
            Table.nativeSetNull(tableNativePtr, columnInfo.sProductFeatureIndex, rowIndex, false);
        }
        return rowIndex;
    }

    public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> objects, Map<RealmModel,Long> cache) {
        Table table = realm.getTable(quay.com.ipos.ddrsales.model.DDRProduct.class);
        long tableNativePtr = table.getNativeTablePointer();
        DDRProductColumnInfo columnInfo = (DDRProductColumnInfo) realm.schema.getColumnInfo(quay.com.ipos.ddrsales.model.DDRProduct.class);
        long pkColumnIndex = table.getPrimaryKey();
        quay.com.ipos.ddrsales.model.DDRProduct object = null;
        while (objects.hasNext()) {
            object = (quay.com.ipos.ddrsales.model.DDRProduct) objects.next();
            if(!cache.containsKey(object)) {
                if (object instanceof RealmObjectProxy && ((RealmObjectProxy)object).realmGet$proxyState().getRealm$realm() != null && ((RealmObjectProxy)object).realmGet$proxyState().getRealm$realm().getPath().equals(realm.getPath())) {
                    cache.put(object, ((RealmObjectProxy)object).realmGet$proxyState().getRow$realm().getIndex());
                    continue;
                }
                String primaryKeyValue = ((DDRProductRealmProxyInterface) object).realmGet$iProductModalId();
                long rowIndex = Table.NO_MATCH;
                if (primaryKeyValue == null) {
                    rowIndex = Table.nativeFindFirstNull(tableNativePtr, pkColumnIndex);
                } else {
                    rowIndex = Table.nativeFindFirstString(tableNativePtr, pkColumnIndex, primaryKeyValue);
                }
                if (rowIndex == Table.NO_MATCH) {
                    rowIndex = table.addEmptyRowWithPrimaryKey(primaryKeyValue, false);
                }
                cache.put(object, rowIndex);
                String realmGet$productCode = ((DDRProductRealmProxyInterface)object).realmGet$productCode();
                if (realmGet$productCode != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.productCodeIndex, rowIndex, realmGet$productCode, false);
                } else {
                    Table.nativeSetNull(tableNativePtr, columnInfo.productCodeIndex, rowIndex, false);
                }
                String realmGet$sProductName = ((DDRProductRealmProxyInterface)object).realmGet$sProductName();
                if (realmGet$sProductName != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.sProductNameIndex, rowIndex, realmGet$sProductName, false);
                } else {
                    Table.nativeSetNull(tableNativePtr, columnInfo.sProductNameIndex, rowIndex, false);
                }
                String realmGet$productImage = ((DDRProductRealmProxyInterface)object).realmGet$productImage();
                if (realmGet$productImage != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.productImageIndex, rowIndex, realmGet$productImage, false);
                } else {
                    Table.nativeSetNull(tableNativePtr, columnInfo.productImageIndex, rowIndex, false);
                }
                Table.nativeSetLong(tableNativePtr, columnInfo.sProductPriceIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$sProductPrice(), false);
                String realmGet$sProductStock = ((DDRProductRealmProxyInterface)object).realmGet$sProductStock();
                if (realmGet$sProductStock != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.sProductStockIndex, rowIndex, realmGet$sProductStock, false);
                } else {
                    Table.nativeSetNull(tableNativePtr, columnInfo.sProductStockIndex, rowIndex, false);
                }
                Table.nativeSetLong(tableNativePtr, columnInfo.sProductWeightIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$sProductWeight(), false);
                Table.nativeSetBoolean(tableNativePtr, columnInfo.isDiscountIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isDiscount(), false);
                Table.nativeSetLong(tableNativePtr, columnInfo.gstPercIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$gstPerc(), false);
                Table.nativeSetLong(tableNativePtr, columnInfo.cgstIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$cgst(), false);
                Table.nativeSetLong(tableNativePtr, columnInfo.sgstIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$sgst(), false);
                Table.nativeSetLong(tableNativePtr, columnInfo.salesPriceIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$salesPrice(), false);
                Table.nativeSetLong(tableNativePtr, columnInfo.nrvIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$nrv(), false);
                Table.nativeSetLong(tableNativePtr, columnInfo.gplIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$gpl(), false);
                Table.nativeSetLong(tableNativePtr, columnInfo.mrpIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$mrp(), false);
                String realmGet$barCodeNumber = ((DDRProductRealmProxyInterface)object).realmGet$barCodeNumber();
                if (realmGet$barCodeNumber != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.barCodeNumberIndex, rowIndex, realmGet$barCodeNumber, false);
                } else {
                    Table.nativeSetNull(tableNativePtr, columnInfo.barCodeNumberIndex, rowIndex, false);
                }
                Table.nativeSetLong(tableNativePtr, columnInfo.pointsIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$points(), false);
                String realmGet$pointsBasedOn = ((DDRProductRealmProxyInterface)object).realmGet$pointsBasedOn();
                if (realmGet$pointsBasedOn != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.pointsBasedOnIndex, rowIndex, realmGet$pointsBasedOn, false);
                } else {
                    Table.nativeSetNull(tableNativePtr, columnInfo.pointsBasedOnIndex, rowIndex, false);
                }
                Table.nativeSetLong(tableNativePtr, columnInfo.valueFromIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$valueFrom(), false);
                Table.nativeSetLong(tableNativePtr, columnInfo.valueToIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$valueTo(), false);
                Table.nativeSetLong(tableNativePtr, columnInfo.pointsPerIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$pointsPer(), false);
                Table.nativeSetBoolean(tableNativePtr, columnInfo.isReserveStockIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isReserveStock(), false);
                Table.nativeSetBoolean(tableNativePtr, columnInfo.isCheckStockIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isCheckStock(), false);
                Table.nativeSetBoolean(tableNativePtr, columnInfo.isStockDisplayIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isStockDisplay(), false);
                String realmGet$discount = ((DDRProductRealmProxyInterface)object).realmGet$discount();
                if (realmGet$discount != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.discountIndex, rowIndex, realmGet$discount, false);
                } else {
                    Table.nativeSetNull(tableNativePtr, columnInfo.discountIndex, rowIndex, false);
                }
                Table.nativeSetBoolean(tableNativePtr, columnInfo.isSyncIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isSync(), false);
                Table.nativeSetBoolean(tableNativePtr, columnInfo.isUpdateIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isUpdate(), false);
                String realmGet$OrderId = ((DDRProductRealmProxyInterface)object).realmGet$OrderId();
                if (realmGet$OrderId != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.OrderIdIndex, rowIndex, realmGet$OrderId, false);
                } else {
                    Table.nativeSetNull(tableNativePtr, columnInfo.OrderIdIndex, rowIndex, false);
                }
                Table.nativeSetBoolean(tableNativePtr, columnInfo.isAddedIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isAdded(), false);
                Table.nativeSetLong(tableNativePtr, columnInfo.qtyIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$qty(), false);
                Table.nativeSetLong(tableNativePtr, columnInfo.totalPriceIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$totalPrice(), false);
                Table.nativeSetDouble(tableNativePtr, columnInfo.discountPriceIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$discountPrice(), false);
                Table.nativeSetLong(tableNativePtr, columnInfo.totalPointsIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$totalPoints(), false);
                Table.nativeSetLong(tableNativePtr, columnInfo.totalStockIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$totalStock(), false);
                Table.nativeSetBoolean(tableNativePtr, columnInfo.isFreeItemIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isFreeItem(), false);
                Table.nativeSetBoolean(tableNativePtr, columnInfo.isRuleAppliedIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$isRuleApplied(), false);
                String realmGet$parentProductId = ((DDRProductRealmProxyInterface)object).realmGet$parentProductId();
                if (realmGet$parentProductId != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.parentProductIdIndex, rowIndex, realmGet$parentProductId, false);
                } else {
                    Table.nativeSetNull(tableNativePtr, columnInfo.parentProductIdIndex, rowIndex, false);
                }
                Table.nativeSetLong(tableNativePtr, columnInfo.mCheckStockIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$mCheckStock(), false);
                Table.nativeSetBoolean(tableNativePtr, columnInfo.checkStockClickIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$checkStockClick(), false);
                Table.nativeSetDouble(tableNativePtr, columnInfo.accumulatedLoyalityIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$accumulatedLoyality(), false);
                String realmGet$pUOM = ((DDRProductRealmProxyInterface)object).realmGet$pUOM();
                if (realmGet$pUOM != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.pUOMIndex, rowIndex, realmGet$pUOM, false);
                } else {
                    Table.nativeSetNull(tableNativePtr, columnInfo.pUOMIndex, rowIndex, false);
                }
                String realmGet$mUOM = ((DDRProductRealmProxyInterface)object).realmGet$mUOM();
                if (realmGet$mUOM != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.mUOMIndex, rowIndex, realmGet$mUOM, false);
                } else {
                    Table.nativeSetNull(tableNativePtr, columnInfo.mUOMIndex, rowIndex, false);
                }
                Table.nativeSetDouble(tableNativePtr, columnInfo.conversionFactorIndex, rowIndex, ((DDRProductRealmProxyInterface)object).realmGet$conversionFactor(), false);
                String realmGet$brandName = ((DDRProductRealmProxyInterface)object).realmGet$brandName();
                if (realmGet$brandName != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.brandNameIndex, rowIndex, realmGet$brandName, false);
                } else {
                    Table.nativeSetNull(tableNativePtr, columnInfo.brandNameIndex, rowIndex, false);
                }
                String realmGet$subCategoryName = ((DDRProductRealmProxyInterface)object).realmGet$subCategoryName();
                if (realmGet$subCategoryName != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.subCategoryNameIndex, rowIndex, realmGet$subCategoryName, false);
                } else {
                    Table.nativeSetNull(tableNativePtr, columnInfo.subCategoryNameIndex, rowIndex, false);
                }
                String realmGet$categoryName = ((DDRProductRealmProxyInterface)object).realmGet$categoryName();
                if (realmGet$categoryName != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.categoryNameIndex, rowIndex, realmGet$categoryName, false);
                } else {
                    Table.nativeSetNull(tableNativePtr, columnInfo.categoryNameIndex, rowIndex, false);
                }
                String realmGet$hsnName = ((DDRProductRealmProxyInterface)object).realmGet$hsnName();
                if (realmGet$hsnName != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.hsnNameIndex, rowIndex, realmGet$hsnName, false);
                } else {
                    Table.nativeSetNull(tableNativePtr, columnInfo.hsnNameIndex, rowIndex, false);
                }
                String realmGet$hsnCode = ((DDRProductRealmProxyInterface)object).realmGet$hsnCode();
                if (realmGet$hsnCode != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.hsnCodeIndex, rowIndex, realmGet$hsnCode, false);
                } else {
                    Table.nativeSetNull(tableNativePtr, columnInfo.hsnCodeIndex, rowIndex, false);
                }
                String realmGet$sProductFeature = ((DDRProductRealmProxyInterface)object).realmGet$sProductFeature();
                if (realmGet$sProductFeature != null) {
                    Table.nativeSetString(tableNativePtr, columnInfo.sProductFeatureIndex, rowIndex, realmGet$sProductFeature, false);
                } else {
                    Table.nativeSetNull(tableNativePtr, columnInfo.sProductFeatureIndex, rowIndex, false);
                }
            }
        }
    }

    public static quay.com.ipos.ddrsales.model.DDRProduct createDetachedCopy(quay.com.ipos.ddrsales.model.DDRProduct realmObject, int currentDepth, int maxDepth, Map<RealmModel, CacheData<RealmModel>> cache) {
        if (currentDepth > maxDepth || realmObject == null) {
            return null;
        }
        CacheData<RealmModel> cachedObject = cache.get(realmObject);
        quay.com.ipos.ddrsales.model.DDRProduct unmanagedObject;
        if (cachedObject != null) {
            // Reuse cached object or recreate it because it was encountered at a lower depth.
            if (currentDepth >= cachedObject.minDepth) {
                return (quay.com.ipos.ddrsales.model.DDRProduct)cachedObject.object;
            } else {
                unmanagedObject = (quay.com.ipos.ddrsales.model.DDRProduct)cachedObject.object;
                cachedObject.minDepth = currentDepth;
            }
        } else {
            unmanagedObject = new quay.com.ipos.ddrsales.model.DDRProduct();
            cache.put(realmObject, new RealmObjectProxy.CacheData<RealmModel>(currentDepth, unmanagedObject));
        }
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$iProductModalId(((DDRProductRealmProxyInterface) realmObject).realmGet$iProductModalId());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$productCode(((DDRProductRealmProxyInterface) realmObject).realmGet$productCode());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$sProductName(((DDRProductRealmProxyInterface) realmObject).realmGet$sProductName());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$productImage(((DDRProductRealmProxyInterface) realmObject).realmGet$productImage());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$sProductPrice(((DDRProductRealmProxyInterface) realmObject).realmGet$sProductPrice());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$sProductStock(((DDRProductRealmProxyInterface) realmObject).realmGet$sProductStock());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$sProductWeight(((DDRProductRealmProxyInterface) realmObject).realmGet$sProductWeight());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$isDiscount(((DDRProductRealmProxyInterface) realmObject).realmGet$isDiscount());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$gstPerc(((DDRProductRealmProxyInterface) realmObject).realmGet$gstPerc());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$cgst(((DDRProductRealmProxyInterface) realmObject).realmGet$cgst());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$sgst(((DDRProductRealmProxyInterface) realmObject).realmGet$sgst());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$salesPrice(((DDRProductRealmProxyInterface) realmObject).realmGet$salesPrice());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$nrv(((DDRProductRealmProxyInterface) realmObject).realmGet$nrv());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$gpl(((DDRProductRealmProxyInterface) realmObject).realmGet$gpl());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$mrp(((DDRProductRealmProxyInterface) realmObject).realmGet$mrp());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$barCodeNumber(((DDRProductRealmProxyInterface) realmObject).realmGet$barCodeNumber());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$points(((DDRProductRealmProxyInterface) realmObject).realmGet$points());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$pointsBasedOn(((DDRProductRealmProxyInterface) realmObject).realmGet$pointsBasedOn());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$valueFrom(((DDRProductRealmProxyInterface) realmObject).realmGet$valueFrom());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$valueTo(((DDRProductRealmProxyInterface) realmObject).realmGet$valueTo());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$pointsPer(((DDRProductRealmProxyInterface) realmObject).realmGet$pointsPer());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$isReserveStock(((DDRProductRealmProxyInterface) realmObject).realmGet$isReserveStock());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$isCheckStock(((DDRProductRealmProxyInterface) realmObject).realmGet$isCheckStock());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$isStockDisplay(((DDRProductRealmProxyInterface) realmObject).realmGet$isStockDisplay());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$discount(((DDRProductRealmProxyInterface) realmObject).realmGet$discount());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$isSync(((DDRProductRealmProxyInterface) realmObject).realmGet$isSync());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$isUpdate(((DDRProductRealmProxyInterface) realmObject).realmGet$isUpdate());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$OrderId(((DDRProductRealmProxyInterface) realmObject).realmGet$OrderId());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$isAdded(((DDRProductRealmProxyInterface) realmObject).realmGet$isAdded());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$qty(((DDRProductRealmProxyInterface) realmObject).realmGet$qty());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$totalPrice(((DDRProductRealmProxyInterface) realmObject).realmGet$totalPrice());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$discountPrice(((DDRProductRealmProxyInterface) realmObject).realmGet$discountPrice());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$totalPoints(((DDRProductRealmProxyInterface) realmObject).realmGet$totalPoints());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$totalStock(((DDRProductRealmProxyInterface) realmObject).realmGet$totalStock());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$isFreeItem(((DDRProductRealmProxyInterface) realmObject).realmGet$isFreeItem());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$isRuleApplied(((DDRProductRealmProxyInterface) realmObject).realmGet$isRuleApplied());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$parentProductId(((DDRProductRealmProxyInterface) realmObject).realmGet$parentProductId());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$mCheckStock(((DDRProductRealmProxyInterface) realmObject).realmGet$mCheckStock());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$checkStockClick(((DDRProductRealmProxyInterface) realmObject).realmGet$checkStockClick());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$accumulatedLoyality(((DDRProductRealmProxyInterface) realmObject).realmGet$accumulatedLoyality());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$pUOM(((DDRProductRealmProxyInterface) realmObject).realmGet$pUOM());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$mUOM(((DDRProductRealmProxyInterface) realmObject).realmGet$mUOM());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$conversionFactor(((DDRProductRealmProxyInterface) realmObject).realmGet$conversionFactor());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$brandName(((DDRProductRealmProxyInterface) realmObject).realmGet$brandName());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$subCategoryName(((DDRProductRealmProxyInterface) realmObject).realmGet$subCategoryName());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$categoryName(((DDRProductRealmProxyInterface) realmObject).realmGet$categoryName());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$hsnName(((DDRProductRealmProxyInterface) realmObject).realmGet$hsnName());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$hsnCode(((DDRProductRealmProxyInterface) realmObject).realmGet$hsnCode());
        ((DDRProductRealmProxyInterface) unmanagedObject).realmSet$sProductFeature(((DDRProductRealmProxyInterface) realmObject).realmGet$sProductFeature());
        return unmanagedObject;
    }

    static quay.com.ipos.ddrsales.model.DDRProduct update(Realm realm, quay.com.ipos.ddrsales.model.DDRProduct realmObject, quay.com.ipos.ddrsales.model.DDRProduct newObject, Map<RealmModel, RealmObjectProxy> cache) {
        ((DDRProductRealmProxyInterface) realmObject).realmSet$productCode(((DDRProductRealmProxyInterface) newObject).realmGet$productCode());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$sProductName(((DDRProductRealmProxyInterface) newObject).realmGet$sProductName());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$productImage(((DDRProductRealmProxyInterface) newObject).realmGet$productImage());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$sProductPrice(((DDRProductRealmProxyInterface) newObject).realmGet$sProductPrice());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$sProductStock(((DDRProductRealmProxyInterface) newObject).realmGet$sProductStock());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$sProductWeight(((DDRProductRealmProxyInterface) newObject).realmGet$sProductWeight());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$isDiscount(((DDRProductRealmProxyInterface) newObject).realmGet$isDiscount());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$gstPerc(((DDRProductRealmProxyInterface) newObject).realmGet$gstPerc());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$cgst(((DDRProductRealmProxyInterface) newObject).realmGet$cgst());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$sgst(((DDRProductRealmProxyInterface) newObject).realmGet$sgst());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$salesPrice(((DDRProductRealmProxyInterface) newObject).realmGet$salesPrice());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$nrv(((DDRProductRealmProxyInterface) newObject).realmGet$nrv());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$gpl(((DDRProductRealmProxyInterface) newObject).realmGet$gpl());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$mrp(((DDRProductRealmProxyInterface) newObject).realmGet$mrp());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$barCodeNumber(((DDRProductRealmProxyInterface) newObject).realmGet$barCodeNumber());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$points(((DDRProductRealmProxyInterface) newObject).realmGet$points());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$pointsBasedOn(((DDRProductRealmProxyInterface) newObject).realmGet$pointsBasedOn());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$valueFrom(((DDRProductRealmProxyInterface) newObject).realmGet$valueFrom());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$valueTo(((DDRProductRealmProxyInterface) newObject).realmGet$valueTo());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$pointsPer(((DDRProductRealmProxyInterface) newObject).realmGet$pointsPer());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$isReserveStock(((DDRProductRealmProxyInterface) newObject).realmGet$isReserveStock());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$isCheckStock(((DDRProductRealmProxyInterface) newObject).realmGet$isCheckStock());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$isStockDisplay(((DDRProductRealmProxyInterface) newObject).realmGet$isStockDisplay());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$discount(((DDRProductRealmProxyInterface) newObject).realmGet$discount());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$isSync(((DDRProductRealmProxyInterface) newObject).realmGet$isSync());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$isUpdate(((DDRProductRealmProxyInterface) newObject).realmGet$isUpdate());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$OrderId(((DDRProductRealmProxyInterface) newObject).realmGet$OrderId());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$isAdded(((DDRProductRealmProxyInterface) newObject).realmGet$isAdded());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$qty(((DDRProductRealmProxyInterface) newObject).realmGet$qty());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$totalPrice(((DDRProductRealmProxyInterface) newObject).realmGet$totalPrice());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$discountPrice(((DDRProductRealmProxyInterface) newObject).realmGet$discountPrice());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$totalPoints(((DDRProductRealmProxyInterface) newObject).realmGet$totalPoints());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$totalStock(((DDRProductRealmProxyInterface) newObject).realmGet$totalStock());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$isFreeItem(((DDRProductRealmProxyInterface) newObject).realmGet$isFreeItem());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$isRuleApplied(((DDRProductRealmProxyInterface) newObject).realmGet$isRuleApplied());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$parentProductId(((DDRProductRealmProxyInterface) newObject).realmGet$parentProductId());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$mCheckStock(((DDRProductRealmProxyInterface) newObject).realmGet$mCheckStock());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$checkStockClick(((DDRProductRealmProxyInterface) newObject).realmGet$checkStockClick());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$accumulatedLoyality(((DDRProductRealmProxyInterface) newObject).realmGet$accumulatedLoyality());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$pUOM(((DDRProductRealmProxyInterface) newObject).realmGet$pUOM());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$mUOM(((DDRProductRealmProxyInterface) newObject).realmGet$mUOM());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$conversionFactor(((DDRProductRealmProxyInterface) newObject).realmGet$conversionFactor());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$brandName(((DDRProductRealmProxyInterface) newObject).realmGet$brandName());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$subCategoryName(((DDRProductRealmProxyInterface) newObject).realmGet$subCategoryName());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$categoryName(((DDRProductRealmProxyInterface) newObject).realmGet$categoryName());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$hsnName(((DDRProductRealmProxyInterface) newObject).realmGet$hsnName());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$hsnCode(((DDRProductRealmProxyInterface) newObject).realmGet$hsnCode());
        ((DDRProductRealmProxyInterface) realmObject).realmSet$sProductFeature(((DDRProductRealmProxyInterface) newObject).realmGet$sProductFeature());
        return realmObject;
    }

    @Override
    @SuppressWarnings("ArrayToString")
    public String toString() {
        if (!RealmObject.isValid(this)) {
            return "Invalid object";
        }
        StringBuilder stringBuilder = new StringBuilder("DDRProduct = [");
        stringBuilder.append("{iProductModalId:");
        stringBuilder.append(realmGet$iProductModalId() != null ? realmGet$iProductModalId() : "null");
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{productCode:");
        stringBuilder.append(realmGet$productCode() != null ? realmGet$productCode() : "null");
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{sProductName:");
        stringBuilder.append(realmGet$sProductName() != null ? realmGet$sProductName() : "null");
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{productImage:");
        stringBuilder.append(realmGet$productImage() != null ? realmGet$productImage() : "null");
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{sProductPrice:");
        stringBuilder.append(realmGet$sProductPrice());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{sProductStock:");
        stringBuilder.append(realmGet$sProductStock() != null ? realmGet$sProductStock() : "null");
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{sProductWeight:");
        stringBuilder.append(realmGet$sProductWeight());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{isDiscount:");
        stringBuilder.append(realmGet$isDiscount());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{gstPerc:");
        stringBuilder.append(realmGet$gstPerc());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{cgst:");
        stringBuilder.append(realmGet$cgst());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{sgst:");
        stringBuilder.append(realmGet$sgst());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{salesPrice:");
        stringBuilder.append(realmGet$salesPrice());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{nrv:");
        stringBuilder.append(realmGet$nrv());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{gpl:");
        stringBuilder.append(realmGet$gpl());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{mrp:");
        stringBuilder.append(realmGet$mrp());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{barCodeNumber:");
        stringBuilder.append(realmGet$barCodeNumber() != null ? realmGet$barCodeNumber() : "null");
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{points:");
        stringBuilder.append(realmGet$points());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{pointsBasedOn:");
        stringBuilder.append(realmGet$pointsBasedOn() != null ? realmGet$pointsBasedOn() : "null");
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{valueFrom:");
        stringBuilder.append(realmGet$valueFrom());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{valueTo:");
        stringBuilder.append(realmGet$valueTo());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{pointsPer:");
        stringBuilder.append(realmGet$pointsPer());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{isReserveStock:");
        stringBuilder.append(realmGet$isReserveStock());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{isCheckStock:");
        stringBuilder.append(realmGet$isCheckStock());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{isStockDisplay:");
        stringBuilder.append(realmGet$isStockDisplay());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{discount:");
        stringBuilder.append(realmGet$discount() != null ? realmGet$discount() : "null");
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{isSync:");
        stringBuilder.append(realmGet$isSync());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{isUpdate:");
        stringBuilder.append(realmGet$isUpdate());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{OrderId:");
        stringBuilder.append(realmGet$OrderId() != null ? realmGet$OrderId() : "null");
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{isAdded:");
        stringBuilder.append(realmGet$isAdded());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{qty:");
        stringBuilder.append(realmGet$qty());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{totalPrice:");
        stringBuilder.append(realmGet$totalPrice());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{discountPrice:");
        stringBuilder.append(realmGet$discountPrice());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{totalPoints:");
        stringBuilder.append(realmGet$totalPoints());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{totalStock:");
        stringBuilder.append(realmGet$totalStock());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{isFreeItem:");
        stringBuilder.append(realmGet$isFreeItem());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{isRuleApplied:");
        stringBuilder.append(realmGet$isRuleApplied());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{parentProductId:");
        stringBuilder.append(realmGet$parentProductId() != null ? realmGet$parentProductId() : "null");
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{mCheckStock:");
        stringBuilder.append(realmGet$mCheckStock());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{checkStockClick:");
        stringBuilder.append(realmGet$checkStockClick());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{accumulatedLoyality:");
        stringBuilder.append(realmGet$accumulatedLoyality());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{pUOM:");
        stringBuilder.append(realmGet$pUOM() != null ? realmGet$pUOM() : "null");
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{mUOM:");
        stringBuilder.append(realmGet$mUOM() != null ? realmGet$mUOM() : "null");
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{conversionFactor:");
        stringBuilder.append(realmGet$conversionFactor());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{brandName:");
        stringBuilder.append(realmGet$brandName() != null ? realmGet$brandName() : "null");
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{subCategoryName:");
        stringBuilder.append(realmGet$subCategoryName() != null ? realmGet$subCategoryName() : "null");
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{categoryName:");
        stringBuilder.append(realmGet$categoryName() != null ? realmGet$categoryName() : "null");
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{hsnName:");
        stringBuilder.append(realmGet$hsnName() != null ? realmGet$hsnName() : "null");
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{hsnCode:");
        stringBuilder.append(realmGet$hsnCode() != null ? realmGet$hsnCode() : "null");
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{sProductFeature:");
        stringBuilder.append(realmGet$sProductFeature() != null ? realmGet$sProductFeature() : "null");
        stringBuilder.append("}");
        stringBuilder.append("]");
        return stringBuilder.toString();
    }

    @Override
    public ProxyState<?> realmGet$proxyState() {
        return proxyState;
    }

    @Override
    public int hashCode() {
        String realmName = proxyState.getRealm$realm().getPath();
        String tableName = proxyState.getRow$realm().getTable().getName();
        long rowIndex = proxyState.getRow$realm().getIndex();

        int result = 17;
        result = 31 * result + ((realmName != null) ? realmName.hashCode() : 0);
        result = 31 * result + ((tableName != null) ? tableName.hashCode() : 0);
        result = 31 * result + (int) (rowIndex ^ (rowIndex >>> 32));
        return result;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        DDRProductRealmProxy aDDRProduct = (DDRProductRealmProxy)o;

        String path = proxyState.getRealm$realm().getPath();
        String otherPath = aDDRProduct.proxyState.getRealm$realm().getPath();
        if (path != null ? !path.equals(otherPath) : otherPath != null) return false;

        String tableName = proxyState.getRow$realm().getTable().getName();
        String otherTableName = aDDRProduct.proxyState.getRow$realm().getTable().getName();
        if (tableName != null ? !tableName.equals(otherTableName) : otherTableName != null) return false;

        if (proxyState.getRow$realm().getIndex() != aDDRProduct.proxyState.getRow$realm().getIndex()) return false;

        return true;
    }

}
