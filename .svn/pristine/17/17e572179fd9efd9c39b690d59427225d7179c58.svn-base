package quay.com.ipos.compliance.data.local.dao;

import android.arch.lifecycle.ComputableLiveData;
import android.arch.lifecycle.LiveData;
import android.arch.persistence.db.SupportSQLiteStatement;
import android.arch.persistence.room.EntityInsertionAdapter;
import android.arch.persistence.room.InvalidationTracker.Observer;
import android.arch.persistence.room.RoomDatabase;
import android.arch.persistence.room.RoomSQLiteQuery;
import android.database.Cursor;
import android.support.annotation.NonNull;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import quay.com.ipos.compliance.data.local.entity.Employee;

@SuppressWarnings("unchecked")
public class EmployeeDao_AppDatabase_0_Impl implements EmployeeDao {
  private final RoomDatabase __db;

  private final EntityInsertionAdapter __insertionAdapterOfEmployee;

  public EmployeeDao_AppDatabase_0_Impl(RoomDatabase __db) {
    this.__db = __db;
    this.__insertionAdapterOfEmployee = new EntityInsertionAdapter<Employee>(__db) {
      @Override
      public String createQuery() {
        return "INSERT OR REPLACE INTO `employee`(`empCode`,`empName`) VALUES (?,?)";
      }

      @Override
      public void bind(SupportSQLiteStatement stmt, Employee value) {
        if (value.empCode == null) {
          stmt.bindNull(1);
        } else {
          stmt.bindString(1, value.empCode);
        }
        if (value.empName == null) {
          stmt.bindNull(2);
        } else {
          stmt.bindString(2, value.empName);
        }
      }
    };
  }

  @Override
  public void saveAllEmployees(List<Employee> taskList) {
    __db.beginTransaction();
    try {
      __insertionAdapterOfEmployee.insert(taskList);
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public long saveTask(Employee task) {
    __db.beginTransaction();
    try {
      long _result = __insertionAdapterOfEmployee.insertAndReturnId(task);
      __db.setTransactionSuccessful();
      return _result;
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public LiveData<List<Employee>> fetchAllData() {
    final String _sql = "SELECT * FROM 'employee'";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 0);
    return new ComputableLiveData<List<Employee>>() {
      private Observer _observer;

      @Override
      protected List<Employee> compute() {
        if (_observer == null) {
          _observer = new Observer("employee") {
            @Override
            public void onInvalidated(@NonNull Set<String> tables) {
              invalidate();
            }
          };
          __db.getInvalidationTracker().addWeakObserver(_observer);
        }
        final Cursor _cursor = __db.query(_statement);
        try {
          final int _cursorIndexOfEmpCode = _cursor.getColumnIndexOrThrow("empCode");
          final int _cursorIndexOfEmpName = _cursor.getColumnIndexOrThrow("empName");
          final List<Employee> _result = new ArrayList<Employee>(_cursor.getCount());
          while(_cursor.moveToNext()) {
            final Employee _item;
            _item = new Employee();
            _item.empCode = _cursor.getString(_cursorIndexOfEmpCode);
            _item.empName = _cursor.getString(_cursorIndexOfEmpName);
            _result.add(_item);
          }
          return _result;
        } finally {
          _cursor.close();
        }
      }

      @Override
      protected void finalize() {
        _statement.release();
      }
    }.getLiveData();
  }

  @Override
  public LiveData<List<Employee>> getTaskByPlace(String id) {
    final String _sql = "SELECT * FROM 'employee' WHERE empCode=?";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 1);
    int _argIndex = 1;
    if (id == null) {
      _statement.bindNull(_argIndex);
    } else {
      _statement.bindString(_argIndex, id);
    }
    return new ComputableLiveData<List<Employee>>() {
      private Observer _observer;

      @Override
      protected List<Employee> compute() {
        if (_observer == null) {
          _observer = new Observer("employee") {
            @Override
            public void onInvalidated(@NonNull Set<String> tables) {
              invalidate();
            }
          };
          __db.getInvalidationTracker().addWeakObserver(_observer);
        }
        final Cursor _cursor = __db.query(_statement);
        try {
          final int _cursorIndexOfEmpCode = _cursor.getColumnIndexOrThrow("empCode");
          final int _cursorIndexOfEmpName = _cursor.getColumnIndexOrThrow("empName");
          final List<Employee> _result = new ArrayList<Employee>(_cursor.getCount());
          while(_cursor.moveToNext()) {
            final Employee _item;
            _item = new Employee();
            _item.empCode = _cursor.getString(_cursorIndexOfEmpCode);
            _item.empName = _cursor.getString(_cursorIndexOfEmpName);
            _result.add(_item);
          }
          return _result;
        } finally {
          _cursor.close();
        }
      }

      @Override
      protected void finalize() {
        _statement.release();
      }
    }.getLiveData();
  }

  @Override
  public LiveData<Employee> getTaskById(String id) {
    final String _sql = "SELECT * FROM 'employee' WHERE empCode=?";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 1);
    int _argIndex = 1;
    if (id == null) {
      _statement.bindNull(_argIndex);
    } else {
      _statement.bindString(_argIndex, id);
    }
    return new ComputableLiveData<Employee>() {
      private Observer _observer;

      @Override
      protected Employee compute() {
        if (_observer == null) {
          _observer = new Observer("employee") {
            @Override
            public void onInvalidated(@NonNull Set<String> tables) {
              invalidate();
            }
          };
          __db.getInvalidationTracker().addWeakObserver(_observer);
        }
        final Cursor _cursor = __db.query(_statement);
        try {
          final int _cursorIndexOfEmpCode = _cursor.getColumnIndexOrThrow("empCode");
          final int _cursorIndexOfEmpName = _cursor.getColumnIndexOrThrow("empName");
          final Employee _result;
          if(_cursor.moveToFirst()) {
            _result = new Employee();
            _result.empCode = _cursor.getString(_cursorIndexOfEmpCode);
            _result.empName = _cursor.getString(_cursorIndexOfEmpName);
          } else {
            _result = null;
          }
          return _result;
        } finally {
          _cursor.close();
        }
      }

      @Override
      protected void finalize() {
        _statement.release();
      }
    }.getLiveData();
  }
}
